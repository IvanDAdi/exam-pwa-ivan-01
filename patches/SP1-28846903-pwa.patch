From 7140de6b0f4c30aba06308b5abeceddc85f08b1f Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Mon, 17 Oct 2022 08:06:02 +0700
Subject: [PATCH 01/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): [Incomplete] - Move sensitive configs

---
 core/api/graphql/remote/index.js              |   3 +
 core/api/graphql/request/index.js             |  23 +-
 core/api/rest/paypal/client.js                |  45 ++-
 .../pages/default/components/payment/index.js | 139 ++++-----
 core/modules/checkout/pages/default/core.js   | 107 ++++---
 .../review/components/PaymentMethod/index.js  |  22 +-
 .../review/components/PlaceOrder/index.js     |  27 +-
 .../paypal/plugins/PaypalButton/index.js      | 266 ++++++++++--------
 core/modules/theme/layout/index.js            |  16 +-
 core/modules/theme/pages/_app.js              | 138 +++++----
 core/services/graphql/schema/config.js        |  42 ++-
 11 files changed, 490 insertions(+), 338 deletions(-)

diff --git a/core/api/graphql/remote/index.js b/core/api/graphql/remote/index.js
index 98ade7fe8..a45166a51 100644
--- a/core/api/graphql/remote/index.js
+++ b/core/api/graphql/remote/index.js
@@ -29,6 +29,9 @@ const executor = async ({
         const url = graphqlEndpoint[appEnv] || graphqlEndpoint.prod;
         if (token && token !== '') {
             additionalHeader.Authorization = `Bearer ${decrypt(token)}`;
+        } else {
+            token = 'z42nzj61mfsbe5ys0qo2h5vha1icxe5a';
+            additionalHeader.Authorization = `Bearer ${token}`;
         }
         if (checkoutToken && checkoutToken !== '') {
             additionalHeader['Checkout-Token'] = `${decrypt(checkoutToken)}`;
diff --git a/core/api/graphql/request/index.js b/core/api/graphql/request/index.js
index a64322bc1..5d2bb376b 100644
--- a/core/api/graphql/request/index.js
+++ b/core/api/graphql/request/index.js
@@ -9,15 +9,27 @@ const { getAppEnv } = require('../../../helpers/env');
 function requestGraph(query, variables = {}, context = {}, config = {}) {
     let token = '';
     if (config.token) {
-        token = `Bearer ${config.token}`;
+        if (query.includes('snap_client_key')) {
+            token = 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a';
+        } else token = `Bearer ${config.token}`;
     } else if (context.session || context.headers) {
-        token = context.session.token ? `Bearer ${decrypt(context.session.token)}`
-            : context.headers.authorization ? context.headers.authorization : '';
+        if (query.includes('snap_client_key')) {
+            token = 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a';
+        } else {
+            token = context.session.token
+                ? `Bearer ${decrypt(context.session.token)}`
+                : context.headers.authorization
+                ? context.headers.authorization
+                : '';
+        }
     }
     return new Promise((resolve) => {
         const additionalHeader = storeCode ? { store: storeCode } : {};
         if (token && token !== '') {
             additionalHeader.Authorization = token;
+        } else if (query.includes('snap_client_key')) {
+            token = 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a';
+            additionalHeader.Authorization = token;
         }
         const headers = {
             ...additionalHeader,
@@ -26,7 +38,10 @@ function requestGraph(query, variables = {}, context = {}, config = {}) {
         const client = new GraphQLClient(`${graphqlEndpoint[appEnv] || graphqlEndpoint.prod}`, {
             headers,
         });
-        client.request(query, variables).then((data) => resolve(data)).catch((err) => resolve(err));
+        client
+            .request(query, variables)
+            .then((data) => resolve(data))
+            .catch((err) => resolve(err));
     });
 }
 
diff --git a/core/api/rest/paypal/client.js b/core/api/rest/paypal/client.js
index 03c17a3cb..6b41cc215 100644
--- a/core/api/rest/paypal/client.js
+++ b/core/api/rest/paypal/client.js
@@ -9,7 +9,7 @@
  */
 const checkoutNodeJssdk = require('@paypal/checkout-server-sdk');
 const { getAppEnv } = require('../../../helpers/env');
-const { modules } = require('../../../../swift.config');
+const { modules, graphqlEndpoint } = require('../../../../swift.config');
 
 /**
  *
@@ -17,15 +17,44 @@ const { modules } = require('../../../../swift.config');
  * This sample uses SandboxEnvironment. In production, use LiveEnvironment.
  *
  */
+const query = `{
+    storeConfig {
+        paypal_key {
+            cancel_url
+            client_id
+            client_secret
+            disable_funding
+            intent
+            key_data
+            key_token
+            path
+            redirect_url
+        }
+    }
+}`;
+
 function environment() {
-    const appEnv = getAppEnv();
-    const clientId = modules.paypal.clientId[appEnv];
-    const clientSecret = modules.paypal.clientSecret[appEnv];
+                           // fetch(`${graphqlEndpoint[getAppEnv()]}?${encodeURI(query)}`, {
+                           //     method: 'GET',
+                           //     headers: {
+                           //         Authorization: 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a',
+                           //     },
+                           // })
+                           //     .then((res) => {
+                           //         console.log(res.json());
+                           //         const appEnv = getAppEnv();
+                           //         const clientId = modules.paypal.clientId[appEnv];
+                           //         const clientSecret = modules.paypal.clientSecret[appEnv];
 
-    return new checkoutNodeJssdk.core.SandboxEnvironment(
-        clientId, clientSecret,
-    );
-}
+                           //         return new checkoutNodeJssdk.core.SandboxEnvironment(clientId, clientSecret);
+                           //     })
+                           //     .catch(() => {});
+                           const appEnv = getAppEnv();
+                           const clientId = modules.paypal.clientId[appEnv];
+                           const clientSecret = modules.paypal.clientSecret[appEnv];
+
+                           return new checkoutNodeJssdk.core.SandboxEnvironment(clientId, clientSecret);
+                       }
 
 /**
  *
diff --git a/core/modules/checkout/pages/default/components/payment/index.js b/core/modules/checkout/pages/default/components/payment/index.js
index f3baaf0cc..13e16b792 100644
--- a/core/modules/checkout/pages/default/components/payment/index.js
+++ b/core/modules/checkout/pages/default/components/payment/index.js
@@ -1,9 +1,9 @@
 /* eslint-disable no-unused-vars */
 /* eslint-disable no-param-reassign */
+import { modules } from '@config';
+import gqlService from '@core_modules/checkout/services/graphql';
 import React from 'react';
 import TagManager from 'react-gtm-module';
-import gqlService from '@core_modules/checkout/services/graphql';
-import { modules } from '@config';
 
 export default function CustomizedExpansionPanels({
     checkout,
@@ -36,9 +36,7 @@ export default function CustomizedExpansionPanels({
      * [METHOD] handle when get result from set payment method
      * @param {state, result, val, cart} params
      */
-    const onHandleResult = ({
-        state, result, val, cart, purchaseOrder = false,
-    }) => {
+    const onHandleResult = ({ state, result, val, cart, purchaseOrder = false }) => {
         state = {
             ...checkout,
             selected: {
@@ -212,59 +210,64 @@ export default function CustomizedExpansionPanels({
                         cartId: cart.id,
                         payment_method,
                     },
-                }).then((result) => {
-                    if (val === 'paypal_express') {
-                        state = {
-                            ...checkout,
-                            selected: {
-                                ...checkout.selected,
-                                payment: val,
-                                purchaseOrderNumber: null,
-                            },
-                            loading: {
-                                ...checkout.loading,
-                                all: false,
-                                order: false,
-                            },
-                        };
-                        setCheckout(state);
-                        if (storeConfig?.pwa?.paypal_enable
-                            && initialOptionPaypal['data-order-id'] === '' && checkout.selected.payment === 'paypal_express') {
-                            getPaypalToken({
-                                variables: {
-                                    cartId: cart.id,
-                                    code: 'paypal_express',
-                                    returnUrl: modules.paypal.returnUrl,
-                                    cancelUrl: modules.paypal.cancelUrl,
+                })
+                    .then((result) => {
+                        if (val === 'paypal_express') {
+                            state = {
+                                ...checkout,
+                                selected: {
+                                    ...checkout.selected,
+                                    payment: val,
+                                    purchaseOrderNumber: null,
+                                },
+                                loading: {
+                                    ...checkout.loading,
+                                    all: false,
+                                    order: false,
                                 },
-                            }).then((res) => {
-                                if (res.data && res.data.createPaypalExpressToken && res.data.createPaypalExpressToken.token) {
-                                    const { token } = res.data.createPaypalExpressToken;
-                                    setTokenData(res.data.createPaypalExpressToken);
-                                    setInitialOptionPaypal({
-                                        ...initialOptionPaypal,
-                                        'data-order-id': token,
-                                    });
-                                }
+                            };
+                            setCheckout(state);
+                            if (
+                                storeConfig?.pwa?.paypal_enable &&
+                                initialOptionPaypal['data-order-id'] === '' &&
+                                checkout.selected.payment === 'paypal_express'
+                            ) {
+                                getPaypalToken({
+                                    variables: {
+                                        cartId: cart.id,
+                                        code: 'paypal_express',
+                                        returnUrl: storeConfig?.paypal_key.return_url,
+                                        cancelUrl: storeConfig?.paypal_key.cancel_url,
+                                    },
+                                }).then((res) => {
+                                    if (res.data && res.data.createPaypalExpressToken && res.data.createPaypalExpressToken.token) {
+                                        const { token } = res.data.createPaypalExpressToken;
+                                        setTokenData(res.data.createPaypalExpressToken);
+                                        setInitialOptionPaypal({
+                                            ...initialOptionPaypal,
+                                            'data-order-id': token,
+                                        });
+                                    }
+                                });
+                            }
+                        } else {
+                            onHandleResult({
+                                state,
+                                result,
+                                val,
+                                cart,
                             });
                         }
-                    } else {
+                    })
+                    .catch((err) => {
+                        const result = err;
                         onHandleResult({
                             state,
                             result,
                             val,
                             cart,
                         });
-                    }
-                }).catch((err) => {
-                    const result = err;
-                    onHandleResult({
-                        state,
-                        result,
-                        val,
-                        cart,
                     });
-                });
             }
         }
     };
@@ -311,26 +314,28 @@ export default function CustomizedExpansionPanels({
                 cartId: cart.id,
                 payment_method,
             },
-        }).then((result) => {
-            onHandleResult({
-                state,
-                result,
-                val: selected_payment,
-                cart,
-            });
-            handleOpenMessage({
-                variant: 'success',
-                text: t('checkout:message:purchaseOrderApplied'),
-            });
-        }).catch((err) => {
-            const result = err;
-            onHandleResult({
-                state,
-                result,
-                val: selected_payment,
-                cart,
+        })
+            .then((result) => {
+                onHandleResult({
+                    state,
+                    result,
+                    val: selected_payment,
+                    cart,
+                });
+                handleOpenMessage({
+                    variant: 'success',
+                    text: t('checkout:message:purchaseOrderApplied'),
+                });
+            })
+            .catch((err) => {
+                const result = err;
+                onHandleResult({
+                    state,
+                    result,
+                    val: selected_payment,
+                    cart,
+                });
             });
-        });
     };
 
     /**
diff --git a/core/modules/checkout/pages/default/core.js b/core/modules/checkout/pages/default/core.js
index abc0ae76b..9e2c89e5c 100644
--- a/core/modules/checkout/pages/default/core.js
+++ b/core/modules/checkout/pages/default/core.js
@@ -1,26 +1,24 @@
 /* eslint-disable no-unused-vars */
 /* eslint-disable eqeqeq */
-import * as Yup from 'yup';
-import React, { useEffect, useState } from 'react';
-import { useFormik } from 'formik';
-import { removeCheckoutData, getCheckoutData } from '@helpers/cookies';
-import { setLocalStorage } from '@helper_localstorage';
+import Toast from '@common_toast';
+import { modules, nameCheckoutState } from '@config';
+import { getCartCallbackUrl, getIpayUrl, getLoginCallbackUrl, getSuccessCallbackUrl } from '@core_modules/checkout/helpers/config';
+import gqlService from '@core_modules/checkout/services/graphql';
 import { getCartId } from '@helpers/cartId';
-import Router from 'next/router';
+import { getStoreHost } from '@helpers/config';
+import { getCheckoutData, removeCheckoutData } from '@helpers/cookies';
+import { formatPrice } from '@helper_currency';
+import { setLocalStorage } from '@helper_localstorage';
 import Layout from '@layout';
-import Head from 'next/head';
-import { modules, nameCheckoutState } from '@config';
+import { getAppEnv } from '@root/core/helpers/env';
 import { updatePwaCheckoutLog } from '@services/graphql/repository/log';
-import { getStoreHost } from '@helpers/config';
+import { useFormik } from 'formik';
 import Cookies from 'js-cookie';
-import { getAppEnv } from '@root/core/helpers/env';
-import Toast from '@common_toast';
-import gqlService from '@core_modules/checkout/services/graphql';
+import Head from 'next/head';
+import Router from 'next/router';
+import React, { useEffect, useState } from 'react';
 import TagManager from 'react-gtm-module';
-import {
-    getCartCallbackUrl, getIpayUrl, getLoginCallbackUrl, getSuccessCallbackUrl,
-} from '@core_modules/checkout/helpers/config';
-import { formatPrice } from '@helper_currency';
+import * as Yup from 'yup';
 
 function equalTo(ref, msg) {
     return this.test({
@@ -37,9 +35,7 @@ function equalTo(ref, msg) {
 }
 
 const Checkout = (props) => {
-    const {
-        t, storeConfig, pageConfig, Content, cartId: propsCardId,
-    } = props;
+    const { t, storeConfig, pageConfig, Content, cartId: propsCardId } = props;
     const config = {
         successRedirect: {
             link: getSuccessCallbackUrl(),
@@ -90,10 +86,12 @@ const Checkout = (props) => {
                 variables: {
                     cartId: cartId || propsCardId,
                 },
-            }).then(async (result) => { }).catch((e) => {
-                // eslint-disable-next-line no-console
-                console.log(e);
-            });
+            })
+                .then(async (result) => {})
+                .catch((e) => {
+                    // eslint-disable-next-line no-console
+                    console.log(e);
+                });
         }
     }, [cartId]);
 
@@ -191,12 +189,12 @@ const Checkout = (props) => {
 
     // config paypal
     const [initialOptionPaypal, setInitialOptionPaypal] = useState({
-        'client-id': modules.paypal.clientId[appEnv],
+        'client-id': storeConfig?.paypal_key.client_id,
         currency: storeConfig?.base_currency_code,
-        intent: modules.paypal.intent,
+        intent: storeConfig?.paypal_key.intent,
         'data-order-id': '',
         // debug: modules.paypal.debug,
-        'disable-funding': modules.paypal.disableFunding,
+        'disable-funding': storeConfig?.paypal_key.disable_funding,
         'merchant-id': storeConfig?.pwa?.paypal_merchant_id,
     });
 
@@ -243,7 +241,7 @@ const Checkout = (props) => {
         email: checkout.data.isGuest ? Yup.string().nullable().email(t('validate:email:wrong')).required(t('validate:email.required')) : null,
         payment: Yup.string().nullable().required(t('validate:required')),
         oldEmail: checkout.data.isGuest ? Yup.string().equalTo(Yup.ref('email')) : null,
-        address: (isOnlyVirtualProductOnCart || checkout.selectStore.id !== null) ? null : Yup.object().nullable().required(t('validate:required')),
+        address: isOnlyVirtualProductOnCart || checkout.selectStore.id !== null ? null : Yup.object().nullable().required(t('validate:required')),
         billing: checkout.selected.delivery === 'home' && Yup.object().nullable().required(t('validate:required')),
         shipping: isOnlyVirtualProductOnCart
             ? null
@@ -264,7 +262,7 @@ const Checkout = (props) => {
             confirmation: false,
         },
         validationSchema: CheckoutSchema,
-        onSubmit: () => { },
+        onSubmit: () => {},
     });
 
     const updateFormik = (cart) => {
@@ -468,8 +466,8 @@ const Checkout = (props) => {
                     variables: {
                         cartId: cart.id,
                         code: 'paypal_express',
-                        returnUrl: modules.paypal.returnUrl,
-                        cancelUrl: modules.paypal.cancelUrl,
+                        returnUrl: storeConfig?.paypal_key.return_url,
+                        cancelUrl: storeConfig?.paypal_key.cancel_url,
                     },
                 }).then((res) => {
                     if (res.data && res.data.createPaypalExpressToken && res.data.createPaypalExpressToken.token) {
@@ -548,11 +546,11 @@ const Checkout = (props) => {
         }
 
         if (
-            dataCart
-            && dataCart.cart
-            && dataCart.cart.shipping_addresses
-            && dataCart.cart.shipping_addresses.length === 0
-            && !checkout.data.isGuest
+            dataCart &&
+            dataCart.cart &&
+            dataCart.cart.shipping_addresses &&
+            dataCart.cart.shipping_addresses.length === 0 &&
+            !checkout.data.isGuest
         ) {
             setCheckout({
                 ...checkout,
@@ -586,11 +584,11 @@ const Checkout = (props) => {
         let customer;
         let address;
         if (
-            !state.data.isGuest
-            && addressCustomer
-            && addressCustomer.data
-            && addressCustomer.data.customer
-            && addressCustomer.data.customer.addresses
+            !state.data.isGuest &&
+            addressCustomer &&
+            addressCustomer.data &&
+            addressCustomer.data.customer &&
+            addressCustomer.data.customer.addresses
         ) {
             customer = addressCustomer.data.customer;
             [address] = customer ? customer.addresses.filter((item) => item.default_shipping) : [null];
@@ -617,15 +615,9 @@ const Checkout = (props) => {
                 }));
             }
 
-            if (
-                shipping
-                && shipping.available_shipping_methods
-                && shipping.available_shipping_methods.length > 0
-            ) {
+            if (shipping && shipping.available_shipping_methods && shipping.available_shipping_methods.length > 0) {
                 const shippingMethod = shipping.selected_shipping_method;
-                state.selected.shipping = shippingMethod
-                    ? `${shippingMethod.carrier_code}_${shippingMethod.method_code}`
-                    : shippingMethod;
+                state.selected.shipping = shippingMethod ? `${shippingMethod.carrier_code}_${shippingMethod.method_code}` : shippingMethod;
             }
 
             setCheckout(state);
@@ -697,7 +689,11 @@ const Checkout = (props) => {
     };
 
     const onCancelPaypal = () => {
-        Router.push(!modules.checkout.checkoutOnly ? `/${modules.paypal.cancelUrl}` : `${getStoreHost(getAppEnv())}${modules.paypal.cancelUrl}`);
+        Router.push(
+            !modules.checkout.checkoutOnly
+                ? `/${storeConfig?.paypal_key.cancel_url}`
+                : `${getStoreHost(getAppEnv())}${storeConfig?.paypal_key.cancel_url}`
+        );
     };
 
     const onErrorPaypal = (err) => {
@@ -856,14 +852,14 @@ const Checkout = (props) => {
                         paypalData.details = details.data.result;
                     }
                 }
-                setLocalStorage(modules.paypal.keyData, paypalData);
+                setLocalStorage(storeConfig?.paypal_key.key_data, paypalData);
                 state = { ...checkout };
                 window.backdropLoader(false);
                 state.loading.order = false;
                 setCheckout(state);
 
-                const redirectMagentoUrl = `${getStoreHost(getAppEnv())}${modules.paypal.returnUrl}`;
-                Router.push(!modules.checkout.checkoutOnly ? `/${modules.paypal.returnUrl}` : redirectMagentoUrl);
+                const redirectMagentoUrl = `${getStoreHost(getAppEnv())}${storeConfig?.paypal_key.return_url}`;
+                Router.push(!modules.checkout.checkoutOnly ? `/${storeConfig?.paypal_key.return_url}` : redirectMagentoUrl);
             })
             .catch((e) => {
                 onErrorPaypal(e);
@@ -874,9 +870,10 @@ const Checkout = (props) => {
         // const { shipping_addresses } = params;
     };
 
-    const createOrderPaypal = (data, actions) => new Promise((resolve, reject) => {
-        resolve(initialOptionPaypal['data-order-id']);
-    });
+    const createOrderPaypal = (data, actions) =>
+        new Promise((resolve, reject) => {
+            resolve(initialOptionPaypal['data-order-id']);
+        });
 
     const paypalHandlingProps = {
         onClick: onClickPaypal,
diff --git a/core/modules/paypal/pages/review/components/PaymentMethod/index.js b/core/modules/paypal/pages/review/components/PaymentMethod/index.js
index ba702af46..af269ada7 100644
--- a/core/modules/paypal/pages/review/components/PaymentMethod/index.js
+++ b/core/modules/paypal/pages/review/components/PaymentMethod/index.js
@@ -1,15 +1,15 @@
-import React from 'react';
 import Typography from '@common_typography';
+import { modules } from '@config';
 import useStyles from '@core_modules/paypal/pages/review/components/PaymentMethod/style';
 import classNames from 'classnames';
-import { modules } from '@config';
+import React from 'react';
 // import Link from 'next/link';
 
 const PaymentMethod = (props) => {
     const { t, checkout } = props;
     let paypalData = {};
     if (typeof window !== 'undefined') {
-        paypalData = JSON.parse(localStorage.getItem(modules.paypal.keyData));
+        paypalData = JSON.parse(localStorage.getItem(storeConfig?.paypal_key.key_data));
     }
 
     let paymentMethod = {};
@@ -17,8 +17,7 @@ const PaymentMethod = (props) => {
         paymentMethod = checkout.cart.selected_payment_method;
     }
 
-    if (paypalData && paypalData.details && paypalData.details.payer
-        && paypalData.details.payer.email_address) {
+    if (paypalData && paypalData.details && paypalData.details.payer && paypalData.details.payer.email_address) {
         paymentMethod = {
             ...paymentMethod,
             email_address: paypalData.details.payer.email_address,
@@ -45,17 +44,8 @@ const PaymentMethod = (props) => {
                 <Typography variant="p" letter="capitalize">
                     {paymentMethod.title || ''}
                 </Typography>
-                {
-                    paymentMethod && paymentMethod.email_address && (
-                        <Typography variant="p">
-                            {paymentMethod.email_address}
-                        </Typography>
-                    )
-                }
-                <img
-                    src="https://www.paypalobjects.com/webstatic/en_US/i/buttons/pp-acceptance-medium.png"
-                    alt="Buy now with paypal"
-                />
+                {paymentMethod && paymentMethod.email_address && <Typography variant="p">{paymentMethod.email_address}</Typography>}
+                <img src="https://www.paypalobjects.com/webstatic/en_US/i/buttons/pp-acceptance-medium.png" alt="Buy now with paypal" />
             </div>
             {/* <div className="col-xs-12">
                 <Link href={initialOptionPaypal.editUrl || ''}>
diff --git a/core/modules/paypal/pages/review/components/PlaceOrder/index.js b/core/modules/paypal/pages/review/components/PlaceOrder/index.js
index 5fdf01b4e..5ee0e59f8 100644
--- a/core/modules/paypal/pages/review/components/PlaceOrder/index.js
+++ b/core/modules/paypal/pages/review/components/PlaceOrder/index.js
@@ -1,16 +1,14 @@
-import React from 'react';
-import View from '@core_modules/paypal/pages/review/components/PlaceOrder/view';
+import { useApolloClient } from '@apollo/client';
 import { modules } from '@config';
 import gqlService from '@core_modules/checkout/services/graphql';
-import { setCheckoutData } from '@helper_cookies';
-import { useApolloClient } from '@apollo/client';
+import View from '@core_modules/paypal/pages/review/components/PlaceOrder/view';
 import { removeCartId } from '@helper_cartid';
+import { setCheckoutData } from '@helper_cookies';
 import { localTotalCart } from '@services/graphql/schema/local';
+import React from 'react';
 
 const PlaceOrder = (props) => {
-    const {
-        checkout, setCheckout, t, config,
-    } = props;
+    const { checkout, setCheckout, t, config, storeConfig } = props;
     const client = useApolloClient();
 
     // origin name config
@@ -19,7 +17,7 @@ const PlaceOrder = (props) => {
     // eslint-disable-next-line no-unused-vars
     let paypalData = {};
     if (typeof window !== 'undefined') {
-        paypalData = JSON.parse(localStorage.getItem(modules.paypal.keyData));
+        paypalData = JSON.parse(localStorage.getItem(storeConfig?.paypal_key.key_data));
     }
 
     const [placeOrder] = gqlService.placeOrder({ onError: () => {} });
@@ -61,8 +59,7 @@ const PlaceOrder = (props) => {
         }
         if (orderNumber && orderNumber !== '') {
             let { email } = cart;
-            if (checkout.isGuest && paypalData && paypalData.details && paypalData.details.payer
-                && paypalData.details.payer.email_address) {
+            if (checkout.isGuest && paypalData && paypalData.details && paypalData.details.payer && paypalData.details.payer.email_address) {
                 email = paypalData.details.payer.email_address;
             }
             setCheckoutData({
@@ -79,7 +76,7 @@ const PlaceOrder = (props) => {
                 variant: 'success',
                 text: t('checkout:message:placeOrder'),
             });
-            localStorage.removeItem(modules.paypal.keyData);
+            localStorage.removeItem(storeConfig?.paypal_key.key_data);
             window.location.replace(generatesuccessRedirect(orderNumber));
         } else {
             window.backdropLoader(false);
@@ -95,13 +92,7 @@ const PlaceOrder = (props) => {
         }
     };
     const disabled = checkout.selectedShippingMethod === null;
-    return (
-        <View
-            {...props}
-            handlePlaceOrder={handlePlaceOrder}
-            disabled={disabled}
-        />
-    );
+    return <View {...props} handlePlaceOrder={handlePlaceOrder} disabled={disabled} />;
 };
 
 export default PlaceOrder;
diff --git a/core/modules/paypal/plugins/PaypalButton/index.js b/core/modules/paypal/plugins/PaypalButton/index.js
index 7629f0b0c..0e0722b05 100644
--- a/core/modules/paypal/plugins/PaypalButton/index.js
+++ b/core/modules/paypal/plugins/PaypalButton/index.js
@@ -1,17 +1,20 @@
 /* eslint-disable prefer-destructuring */
-import React from 'react';
 import { modules } from '@config';
-import { getAppEnv } from '@helpers/env';
 import {
-    setPaypalPaymentMethod, createPaypalExpressToken, setShippingAddressByInput, setBillingAddressByInput,
+    createPaypalExpressToken,
+    setBillingAddressByInput,
     setGuestEmailAddressOnCart,
+    setPaypalPaymentMethod,
+    setShippingAddressByInput,
 } from '@core_modules/paypal/services/graphql';
-import PaypalButtonView from '@plugin_paypalbutton/view';
-import TagManager from 'react-gtm-module';
-import { getCartId } from '@helper_cartid';
-import { setLocalStorage, getLocalStorage } from '@helper_localstorage';
+import { getAppEnv } from '@helpers/env';
 import { getLoginInfo } from '@helper_auth';
+import { getCartId } from '@helper_cartid';
+import { getLocalStorage, setLocalStorage } from '@helper_localstorage';
+import PaypalButtonView from '@plugin_paypalbutton/view';
 import Router from 'next/router';
+import React from 'react';
+import TagManager from 'react-gtm-module';
 
 const PaypalButton = (props) => {
     const { t, cart, storeConfig } = props;
@@ -29,12 +32,12 @@ const PaypalButton = (props) => {
 
     // config paypal
     const [initialOptionPaypal, setInitialOptionPaypal] = React.useState({
-        'client-id': modules.paypal.clientId[appEnv],
+        'client-id': storeConfig?.paypal_key.client_id,
         currency: storeConfig?.base_currency_code || 'USD',
-        intent: modules.paypal.intent,
+        intent: storeConfig?.paypal_key.intent,
         'data-order-id': '',
         // debug: modules.paypal.debug,
-        'disable-funding': modules.paypal.disableFunding,
+        'disable-funding': storeConfig?.paypal_key.disable_funding,
         'merchant-id': storeConfig?.pwa?.paypal_merchant_id,
     });
 
@@ -60,19 +63,19 @@ const PaypalButton = (props) => {
 
     React.useEffect(() => {
         if (typeof window !== 'undefined' && storeConfig?.pwa?.paypal_enable) {
-            const initialTokenData = getLocalStorage(modules.paypal.keyToken);
+            const initialTokenData = getLocalStorage(storeConfig?.paypal_key.key_token);
             if (!initialTokenData && cartId) {
                 getPaypalToken({
                     variables: {
                         cartId: cart.id,
                         code: 'paypal_express',
-                        returnUrl: modules.paypal.returnUrl,
-                        cancelUrl: modules.paypal.cancelUrl,
+                        returnUrl: storeConfig?.paypal_key.return_url,
+                        cancelUrl: storeConfig?.paypal_key.cancel_url,
                     },
                 }).then((res) => {
                     if (res.data && res.data.createPaypalExpressToken && res.data.createPaypalExpressToken.token) {
                         const { token } = res.data.createPaypalExpressToken;
-                        setLocalStorage(modules.paypal.keyToken, res.data.createPaypalExpressToken);
+                        setLocalStorage(storeConfig?.paypal_key.key_token, res.data.createPaypalExpressToken);
                         setTokenData(res.data.createPaypalExpressToken);
                         setInitialOptionPaypal({
                             ...initialOptionPaypal,
@@ -90,9 +93,7 @@ const PaypalButton = (props) => {
         }
     }, []);
 
-    const onClickPaypal = () => {
-
-    };
+    const onClickPaypal = () => {};
 
     const onCancelPaypal = () => {
         window.backdropLoader(false);
@@ -124,9 +125,15 @@ const PaypalButton = (props) => {
 
         let address = null;
         let email;
-        if (details && details.data && details.data.result && details.data.result.purchase_units
-            && details.data.result.purchase_units.length > 0 && details.data.result.purchase_units[0].shipping
-            && details.data.result.purchase_units[0].shipping.address) {
+        if (
+            details &&
+            details.data &&
+            details.data.result &&
+            details.data.result.purchase_units &&
+            details.data.result.purchase_units.length > 0 &&
+            details.data.result.purchase_units[0].shipping &&
+            details.data.result.purchase_units[0].shipping.address
+        ) {
             let firstname = '';
             let lastname = '';
             if (details.data.result.purchase_units[0].shipping.name && details.data.result.purchase_units[0].shipping.name.full_name) {
@@ -140,8 +147,17 @@ const PaypalButton = (props) => {
             };
         }
 
-        if (details && details.data && details.data.result && details && details.data && details.data.result.payer
-            && details && details.data && details.data.result.payer.email_address) {
+        if (
+            details &&
+            details.data &&
+            details.data.result &&
+            details &&
+            details.data &&
+            details.data.result.payer &&
+            details &&
+            details.data &&
+            details.data.result.payer.email_address
+        ) {
             email = details.data.result.payer.email_address;
         }
 
@@ -151,10 +167,9 @@ const PaypalButton = (props) => {
                     cartId: cart.id,
                     email,
                 },
-            })
-                .catch((e) => {
-                    onErrorPaypal(e);
-                });
+            }).catch((e) => {
+                onErrorPaypal(e);
+            });
         }
 
         if (address) {
@@ -176,10 +191,9 @@ const PaypalButton = (props) => {
                 .then(async () => {
                     setBillingAddress({
                         variables: variableAddress,
-                    })
-                        .catch((e) => {
-                            onErrorPaypal(e);
-                        });
+                    }).catch((e) => {
+                        onErrorPaypal(e);
+                    });
                 })
                 .catch((e) => {
                     onErrorPaypal(e);
@@ -192,67 +206,54 @@ const PaypalButton = (props) => {
                 payerId: data.payerID,
                 token: initialOptionPaypal['data-order-id'],
             },
-        }).then(async (result) => {
-            if (result && result.data && result.data.setPaymentMethodOnCart && result.data.setPaymentMethodOnCart.cart) {
-                const selectedPayment = result.data.setPaymentMethodOnCart.cart.selected_payment_method;
-                // GTM UA dataLayer
-                const dataLayer = {
-                    event: 'checkout',
-                    ecommerce: {
-                        checkout: {
-                            actionField: { step: 3, option: selectedPayment.title, action: 'checkout' },
-                            products: cart && cart.items && cart.items.map(({ quantity, product, prices }) => ({
-                                name: product.name,
-                                id: product.sku,
-                                price: JSON.stringify(prices.price.value),
-                                category: product.categories.length > 0 ? product.categories[0].name : '',
-                                list: product.categories.length > 0 ? product.categories[0].name : '',
-                                quantity: JSON.stringify(quantity),
-                                dimension4: product.stock_status === 'IN_STOCK' ? 'In stock' : 'Out stock',
-                                dimension5: '',
-                                dimension6: '',
-                                dimension7: prices.discount ? 'YES' : 'NO',
-                            })),
+        })
+            .then(async (result) => {
+                if (result && result.data && result.data.setPaymentMethodOnCart && result.data.setPaymentMethodOnCart.cart) {
+                    const selectedPayment = result.data.setPaymentMethodOnCart.cart.selected_payment_method;
+                    // GTM UA dataLayer
+                    const dataLayer = {
+                        event: 'checkout',
+                        ecommerce: {
+                            checkout: {
+                                actionField: { step: 3, option: selectedPayment.title, action: 'checkout' },
+                                products:
+                                    cart &&
+                                    cart.items &&
+                                    cart.items.map(({ quantity, product, prices }) => ({
+                                        name: product.name,
+                                        id: product.sku,
+                                        price: JSON.stringify(prices.price.value),
+                                        category: product.categories.length > 0 ? product.categories[0].name : '',
+                                        list: product.categories.length > 0 ? product.categories[0].name : '',
+                                        quantity: JSON.stringify(quantity),
+                                        dimension4: product.stock_status === 'IN_STOCK' ? 'In stock' : 'Out stock',
+                                        dimension5: '',
+                                        dimension6: '',
+                                        dimension7: prices.discount ? 'YES' : 'NO',
+                                    })),
+                            },
+                            currencyCode: storeConfig.base_currency_code || 'IDR',
                         },
-                        currencyCode: storeConfig.base_currency_code || 'IDR',
-                    },
-                };
-                const dataLayerOption = {
-                    event: 'checkoutOption',
-                    ecommerce: {
-                        currencyCode: storeConfig.base_currency_code || 'IDR',
-                        checkout_option: {
-                            actionField: { step: 3, option: selectedPayment.title, action: 'checkout_option' },
+                    };
+                    const dataLayerOption = {
+                        event: 'checkoutOption',
+                        ecommerce: {
+                            currencyCode: storeConfig.base_currency_code || 'IDR',
+                            checkout_option: {
+                                actionField: { step: 3, option: selectedPayment.title, action: 'checkout_option' },
+                            },
                         },
-                    },
-                };
-                // GA 4 dataLayer
-                const dataLayerOpt = {
-                    event: 'add_payment_info',
-                    ecommerce: {
-                        payment_type: selectedPayment[0].title,
-                        currency: storeConfig.base_currency_code || 'IDR',
-                        items: [
-                            cart && cart.items && cart.items.map(({ quantity, product, prices }) => ({
-                                currency: storeConfig.base_currency_code || 'IDR',
-                                item_name: product.name,
-                                item_id: product.sku,
-                                price: JSON.stringify(prices.price.value),
-                                item_category: product.categories.length > 0 ? product.categories[0].name : '',
-                                item_list_name: product.categories.length > 0 ? product.categories[0].name : '',
-                                quantity: JSON.stringify(quantity),
-                                item_stock_status: product.stock_status === 'IN_STOCK' ? 'In stock' : 'Out stock',
-                                item_sale_product: '',
-                                item_reviews_count: '',
-                                item_reviews_score: '',
-                            })),
-                        ],
-                        fbpixels: {
-                            total_price: cart.prices.grand_total.value,
-                            content_ids: [
-                                {
-                                    payment_type: selectedPayment[0].title,
-                                    items: cart && cart.items.map(({ quantity, product, prices }) => ({
+                    };
+                    // GA 4 dataLayer
+                    const dataLayerOpt = {
+                        event: 'add_payment_info',
+                        ecommerce: {
+                            payment_type: selectedPayment[0].title,
+                            currency: storeConfig.base_currency_code || 'IDR',
+                            items: [
+                                cart &&
+                                    cart.items &&
+                                    cart.items.map(({ quantity, product, prices }) => ({
                                         currency: storeConfig.base_currency_code || 'IDR',
                                         item_name: product.name,
                                         item_id: product.sku,
@@ -265,48 +266,71 @@ const PaypalButton = (props) => {
                                         item_reviews_count: '',
                                         item_reviews_score: '',
                                     })),
-                                },
                             ],
-                            catalog_id: cart.items.map(({ product }) => (product.categories.length > 0 ? product.categories[0].name : '')),
+                            fbpixels: {
+                                total_price: cart.prices.grand_total.value,
+                                content_ids: [
+                                    {
+                                        payment_type: selectedPayment[0].title,
+                                        items:
+                                            cart &&
+                                            cart.items.map(({ quantity, product, prices }) => ({
+                                                currency: storeConfig.base_currency_code || 'IDR',
+                                                item_name: product.name,
+                                                item_id: product.sku,
+                                                price: JSON.stringify(prices.price.value),
+                                                item_category: product.categories.length > 0 ? product.categories[0].name : '',
+                                                item_list_name: product.categories.length > 0 ? product.categories[0].name : '',
+                                                quantity: JSON.stringify(quantity),
+                                                item_stock_status: product.stock_status === 'IN_STOCK' ? 'In stock' : 'Out stock',
+                                                item_sale_product: '',
+                                                item_reviews_count: '',
+                                                item_reviews_score: '',
+                                            })),
+                                    },
+                                ],
+                                catalog_id: cart.items.map(({ product }) => (product.categories.length > 0 ? product.categories[0].name : '')),
+                            },
                         },
-                    },
-                };
-                TagManager.dataLayer({ dataLayer });
-                TagManager.dataLayer({ dataLayer: dataLayerOption });
-                TagManager.dataLayer({ dataLayer: dataLayerOpt });
-            } else {
-                onErrorPaypal('error');
-            }
+                    };
+                    TagManager.dataLayer({ dataLayer });
+                    TagManager.dataLayer({ dataLayer: dataLayerOption });
+                    TagManager.dataLayer({ dataLayer: dataLayerOpt });
+                } else {
+                    onErrorPaypal('error');
+                }
 
-            // set local data
+                // set local data
 
-            const paypalData = {
-                data: {
-                    ...data,
-                    ...initialOptionPaypal,
-                    ...tokenData,
-                },
-                details: {},
-            };
-            if (details && details.data && details.data.result) {
-                paypalData.details = details.data.result;
-            }
-            setLocalStorage(modules.paypal.keyData, paypalData);
-            window.backdropLoader(false);
-            Router.push(`/${modules.paypal.returnUrl}`);
-        }).catch((e) => {
-            // console.log(e);
-            onErrorPaypal(e);
-        });
+                const paypalData = {
+                    data: {
+                        ...data,
+                        ...initialOptionPaypal,
+                        ...tokenData,
+                    },
+                    details: {},
+                };
+                if (details && details.data && details.data.result) {
+                    paypalData.details = details.data.result;
+                }
+                setLocalStorage(storeConfig?.paypal_key.key_data, paypalData);
+                window.backdropLoader(false);
+                Router.push(`/${storeConfig?.paypal_key.return_url}`);
+            })
+            .catch((e) => {
+                // console.log(e);
+                onErrorPaypal(e);
+            });
     };
 
     const onShippingChangePaypal = () => {
         // const { shipping_addresses } = params;
     };
 
-    const createOrderPaypal = () => new Promise((resolve) => {
-        resolve(initialOptionPaypal['data-order-id']);
-    });
+    const createOrderPaypal = () =>
+        new Promise((resolve) => {
+            resolve(initialOptionPaypal['data-order-id']);
+        });
 
     const paypalHandlingProps = {
         onClick: onClickPaypal,
diff --git a/core/modules/theme/layout/index.js b/core/modules/theme/layout/index.js
index 0a5d0045e..243a64baa 100644
--- a/core/modules/theme/layout/index.js
+++ b/core/modules/theme/layout/index.js
@@ -277,7 +277,21 @@ const Layout = (props) => {
     }
 
     if (typeof window !== 'undefined' && storeConfig) {
-        setLocalStorage(storeConfigNameCookie, storeConfig);
+        const arrayStoreConfig = Object.entries(storeConfig);
+        const filteredStoreConfig = arrayStoreConfig.filter(([key, value]) => {
+            if (
+                key !== 'snap_is_production' &&
+                key !== 'snap_client_key' &&
+                key !== 'firebase_api_key' &&
+                key !== 'paypal_key' &&
+                key !== 'swift_server' &&
+                !key.includes('payment_travelokapay_')
+            ) {
+                return true;
+            }
+        });
+        const excludePrivateStoreConfig = Object.fromEntries(filteredStoreConfig);
+        setLocalStorage(storeConfigNameCookie, excludePrivateStoreConfig);
     }
 
     useEffect(() => {
diff --git a/core/modules/theme/pages/_app.js b/core/modules/theme/pages/_app.js
index 3ea2cdd57..419d9f5b2 100644
--- a/core/modules/theme/pages/_app.js
+++ b/core/modules/theme/pages/_app.js
@@ -2,42 +2,39 @@
 /* eslint-disable class-methods-use-this */
 /* eslint-disable func-names */
 /* eslint-disable radix */
-import React from 'react';
-import App from 'next/app';
+import { custDataNameCookie, features, GTM, modules, sentry } from '@config';
+import { getLastPathWithoutLogin, getLoginInfo } from '@helper_auth';
+import { getLocalStorage, setLocalStorage, setResolver, testLocalStorage } from '@helper_localstorage';
+import { appWithTranslation } from '@i18n';
 import CssBaseline from '@material-ui/core/CssBaseline';
-import theme from '@theme_theme';
-import Cookie from 'js-cookie';
-import { getAppEnv } from '@root/core/helpers/env';
 import { ThemeProvider } from '@material-ui/core/styles';
-import { appWithTranslation } from '@i18n';
+import { getAppEnv } from '@root/core/helpers/env';
+import { RewriteFrames } from '@sentry/integrations';
+import { Integrations } from '@sentry/tracing';
 import {
-    storeConfig as ConfigSchema,
-    getVesMenu,
-    getCategories,
     frontendOptions as FrontendSchema,
+    getCategories,
+    getSensitiveConfig as PrivateConfigSchema,
+    getVesMenu,
+    storeConfig as ConfigSchema,
 } from '@services/graphql/schema/config';
-import {
-    GTM, custDataNameCookie, features, sentry, modules,
-} from '@config';
-import { getLoginInfo, getLastPathWithoutLogin } from '@helper_auth';
-import {
-    setResolver, testLocalStorage, setLocalStorage, getLocalStorage,
-} from '@helper_localstorage';
-import { RewriteFrames } from '@sentry/integrations';
-import { Integrations } from '@sentry/tracing';
+import theme from '@theme_theme';
+import Cookie from 'js-cookie';
 import { unregister } from 'next-offline/runtime';
+import App from 'next/app';
+import React from 'react';
 
-import TagManager from 'react-gtm-module';
+import { gql } from '@apollo/client';
 import PageProgressLoader from '@common_loaders/PageProgress';
-import getConfig from 'next/config';
-import routeMiddleware from '@middleware_route';
 import graphRequest from '@graphql_request';
-import Notification from '@lib_firebase/notification';
 import firebase from '@lib_firebase/index';
-import { gql } from '@apollo/client';
+import Notification from '@lib_firebase/notification';
+import routeMiddleware from '@middleware_route';
+import getConfig from 'next/config';
+import TagManager from 'react-gtm-module';
 
-import * as Sentry from '@sentry/node';
 import ModalCookies from '@core_modules/theme/components/modalCookies';
+import * as Sentry from '@sentry/node';
 
 const { publicRuntimeConfig } = getConfig();
 
@@ -78,9 +75,7 @@ class MyApp extends App {
         if (Component.getInitialProps) {
             pageProps = await Component.getInitialProps(ctx);
         }
-        const {
-            res, pathname, query, req,
-        } = ctx;
+        const { res, pathname, query, req } = ctx;
 
         /*
          * ---------------------------------------------
@@ -99,10 +94,10 @@ class MyApp extends App {
         } else {
             isLogin = allcookie.isLogin || 0;
             customerData = allcookie[custDataNameCookie];
-            lastPathNoAuth = req.session && typeof req.session !== 'undefined'
-                && req.session.lastPathNoAuth && typeof req.session.lastPathNoAuth !== 'undefined'
-                ? req.session.lastPathNoAuth
-                : '/customer/account';
+            lastPathNoAuth =
+                req.session && typeof req.session !== 'undefined' && req.session.lastPathNoAuth && typeof req.session.lastPathNoAuth !== 'undefined'
+                    ? req.session.lastPathNoAuth
+                    : '/customer/account';
         }
         isLogin = parseInt(isLogin);
 
@@ -132,19 +127,36 @@ class MyApp extends App {
          */
         let dataVesMenu;
         let frontendOptions;
+        let privateConfig;
         let { storeConfig } = pageProps;
 
         if (typeof window !== 'undefined') {
-            frontendOptions = await pageProps.apolloClient.query({ query: gql`${FrontendSchema}` }).then(({ data }) => data);
+            frontendOptions = await pageProps.apolloClient
+                .query({
+                    query: gql`
+                        ${FrontendSchema}
+                    `,
+                })
+                .then(({ data }) => data);
+            privateConfig = await pageProps.apolloClient
+                .query({
+                    query: gql`
+                        ${FrontendSchema}
+                    `,
+                })
+                .then(({ data }) => data)
+                .catch((e) => console.log(e));
 
             if (ctx && frontendOptions.response && frontendOptions.response.status && frontendOptions.response.status > 500) {
                 ctx.res.redirect('/maintenance');
+            } else if (ctx && privateConfig.response && privateConfig.response.status && privateConfig.response.status > 500) {
+                ctx.res.redirect('/maintenance');
             }
         }
         if (typeof window === 'undefined' && (!storeConfig || typeof storeConfig.secure_base_media_url === 'undefined')) {
-            // storeConfig = await apolloClient.query({ query: ConfigSchema }).then(({ data }) => data.storeConfig);
             storeConfig = await graphRequest(ConfigSchema);
             frontendOptions = await graphRequest(FrontendSchema);
+            privateConfig = await graphRequest(PrivateConfigSchema);
 
             // Handle redirecting to tomaintenance page automatically when GQL is in maintenance mode.
             // We do this here since query storeConfig is the first query and be done in server side
@@ -152,18 +164,24 @@ class MyApp extends App {
                 ctx.res.redirect('/maintenance');
             }
             storeConfig = storeConfig.storeConfig;
+            privateConfig = privateConfig.storeConfig;
             if (!modules.checkout.checkoutOnly) {
                 dataVesMenu = storeConfig.pwa.ves_menu_enable
-                    ? await graphRequest(getVesMenu, { alias: storeConfig.pwa.ves_menu_alias }) : await graphRequest(getCategories);
+                    ? await graphRequest(getVesMenu, { alias: storeConfig.pwa.ves_menu_alias })
+                    : await graphRequest(getCategories);
             }
             frontendOptions = frontendOptions.storeConfig;
-            removeDecimalConfig = storeConfig?.pwa?.remove_decimal_price_enable !== null
-                ? storeConfig?.pwa?.remove_decimal_price_enable
-                : false;
+            removeDecimalConfig = storeConfig?.pwa?.remove_decimal_price_enable !== null ? storeConfig?.pwa?.remove_decimal_price_enable : false;
         } else if (typeof window !== 'undefined' && !storeConfig) {
             storeConfig = getLocalStorage('pwa_config');
             if (!storeConfig || storeConfig === '' || storeConfig === {}) {
-                storeConfig = await pageProps.apolloClient.query({ query: gql`${ConfigSchema}` }).then(({ data }) => data);
+                storeConfig = await pageProps.apolloClient
+                    .query({
+                        query: gql`
+                            ${ConfigSchema}
+                        `,
+                    })
+                    .then(({ data }) => data);
 
                 // Handle redirecting to tomaintenance page automatically when GQL is in maintenance mode.
                 // We do this here since query storeConfig is the first query and be done in server side
@@ -177,17 +195,41 @@ class MyApp extends App {
                 dataVesMenu = getLocalStorage('pwa_vesmenu');
                 if (!dataVesMenu) {
                     dataVesMenu = storeConfig.pwa.ves_menu_enable
-                        ? await pageProps.apolloClient.query(
-                            { query: gql`${getVesMenu}`, variables: { alias: storeConfig.pwa.ves_menu_alias } },
-                        ).then(({ data }) => data)
-                        : await pageProps.apolloClient.query({ query: gql`${getCategories}` }).then(({ data }) => data);
+                        ? await pageProps.apolloClient
+                              .query({
+                                  query: gql`
+                                      ${getVesMenu}
+                                  `,
+                                  variables: { alias: storeConfig.pwa.ves_menu_alias },
+                              })
+                              .then(({ data }) => data)
+                        : await pageProps.apolloClient
+                              .query({
+                                  query: gql`
+                                      ${getCategories}
+                                  `,
+                              })
+                              .then(({ data }) => data);
                 }
             }
-            frontendOptions = await pageProps.apolloClient.query({ query: gql`${FrontendSchema}` }).then(({ data }) => data);
+            frontendOptions = await pageProps.apolloClient
+                .query({
+                    query: gql`
+                        ${FrontendSchema}
+                    `,
+                })
+                .then(({ data }) => data);
+            privateConfig = await pageProps.apolloClient
+                .query({
+                    query: gql`
+                        ${PrivateConfigSchema}
+                    `,
+                })
+                .then(({ data }) => data)
+                .catch((e) => console.log(e));
             frontendOptions = frontendOptions.storeConfig;
-            removeDecimalConfig = storeConfig?.pwa?.remove_decimal_price_enable !== null
-                ? storeConfig?.pwa?.remove_decimal_price_enable
-                : false;
+            privateConfig = privateConfig.storeConfig;
+            removeDecimalConfig = storeConfig?.pwa?.remove_decimal_price_enable !== null ? storeConfig?.pwa?.remove_decimal_price_enable : false;
         }
 
         /*
@@ -210,6 +252,7 @@ class MyApp extends App {
                 removeDecimalConfig,
                 dataVesMenu,
                 frontendOptions,
+                privateConfig,
             },
         };
     }
@@ -330,7 +373,7 @@ class MyApp extends App {
             },
             (err) => {
                 console.log('Service Worker registration failed: ', err);
-            },
+            }
         );
     }
 
@@ -360,6 +403,7 @@ class MyApp extends App {
                 remove_decimal_config: pageProps.removeDecimalConfig,
             });
             setLocalStorage('frontend_options', pageProps.frontendOptions);
+            pageProps.storeConfig = { ...pageProps.storeConfig, ...pageProps.privateConfig };
         }
 
         return (
diff --git a/core/services/graphql/schema/config.js b/core/services/graphql/schema/config.js
index 33fadb896..6c9630584 100644
--- a/core/services/graphql/schema/config.js
+++ b/core/services/graphql/schema/config.js
@@ -267,7 +267,6 @@ export const storeConfig = `
       weight_unit
       oauth_access_token_lifetime_customer
       pwa_checkout_debug_enable
-      snap_client_key
       allow_guest_checkout
       snap_is_production
       aw_blog_general_enabled
@@ -344,6 +343,47 @@ export const frontendOptions = `
 }
 `;
 
+export const getSensitiveConfig = `
+{
+  storeConfig {
+    snap_is_production
+    payment_travelokapay_user_id
+    payment_travelokapay_public_key
+    payment_travelokapay_bin_whitelist
+    snap_client_key
+    firebase_api_key {
+      api_key
+      app_id
+      auth_domain
+      database_url
+      measurement_id
+      messaging_sender_id
+      pair_key
+      project_id
+      push_notification_enable
+      storage_bucket
+    }
+    paypal_key {
+      cancel_url
+      client_id
+      client_secret
+      disable_funding
+      intent
+      key_data
+      key_token
+      path
+      return_url
+    }
+    swift_server {
+      algorithm
+      encryption_key
+      fcm_key_server
+      fcm_topic
+      session_secret
+    }
+  }
+}`;
+
 export const getCmsList = `
 {
   storeConfig {

From c7915c2bc3abb17f60127099259fdcc519e45c1d Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Wed, 26 Oct 2022 13:20:04 +0700
Subject: [PATCH 02/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): [Incomplete] - Paypal Config & Firebase

---
 core/api/rest/firebase-cloud-messaging.js     | 50 ++++++++++----
 core/api/rest/paypal/client.js                | 69 +++++++++----------
 core/helpers/encryption.js                    | 47 +++++++++++--
 core/lib/firebase/index.js                    | 41 ++++++++++-
 .../home/pages/default/components/index.js    | 10 ++-
 core/services/graphql/schema/config.js        |  3 -
 server.js                                     | 35 +++++++---
 7 files changed, 177 insertions(+), 78 deletions(-)

diff --git a/core/api/rest/firebase-cloud-messaging.js b/core/api/rest/firebase-cloud-messaging.js
index 3b13c85dd..8b149d494 100644
--- a/core/api/rest/firebase-cloud-messaging.js
+++ b/core/api/rest/firebase-cloud-messaging.js
@@ -1,28 +1,50 @@
-const { fcm } = require('../../../swift-server.config');
+const { getAppEnv } = require('../../helpers/env');
+const { graphqlEndpoint } = require('../../../swift.config');
 
 /* eslint-disable no-unused-vars */
 /* eslint-disable max-len */
 module.exports = (req, res) => {
     const { token } = req.body;
-    const { topic } = fcm;
-    const keyserver = `key=${fcm.FCM_KEY_SERVER}`;
     if (req.session.fcm_token !== token) {
-        fetch(`https://iid.googleapis.com/iid/v1/${token}/rel/topics/${topic}`, {
-            method: 'post',
+        const query = `{
+            storeConfig {
+                swift_server {
+                    fcm_key_server
+                    fcm_topic
+                }
+            }
+        }`;
+
+        fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
+            method: 'GET',
             headers: {
+                Authorization: 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a',
                 'Content-Type': 'application/json',
-                'Content-Length': 0,
-                Authorization: keyserver,
             },
         })
-            .then((data) => {
-                req.session.fcm_token = token;
-                res.status(200).json({
-                    status: 200,
-                    message: 'success subscribe token',
-                });
+            .then((response) => response.json())
+            .then((responseJson) => {
+                const keyserver = `key=${responseJson.data.storeConfig.swift_server.fcm_key_server}`;
+                fetch(`https://iid.googleapis.com/iid/v1/${token}/rel/topics/${responseJson.data.storeConfig.swift_server.fcm_topic}`, {
+                    method: 'post',
+                    headers: {
+                        'Content-Type': 'application/json',
+                        'Content-Length': 0,
+                        Authorization: keyserver,
+                    },
+                })
+                    .then((data) => {
+                        req.session.fcm_token = token;
+                        res.status(200).json({
+                            status: 200,
+                            message: 'success subscribe token',
+                        });
+                    })
+                    .catch((err) => res.status(500).json(err));
             })
-            .catch((err) => res.status(500).json(err));
+            .catch((err) => {
+                console.log(err);
+            });
     } else {
         res.json({
             status: 200,
diff --git a/core/api/rest/paypal/client.js b/core/api/rest/paypal/client.js
index 6b41cc215..01210af93 100644
--- a/core/api/rest/paypal/client.js
+++ b/core/api/rest/paypal/client.js
@@ -9,7 +9,7 @@
  */
 const checkoutNodeJssdk = require('@paypal/checkout-server-sdk');
 const { getAppEnv } = require('../../../helpers/env');
-const { modules, graphqlEndpoint } = require('../../../../swift.config');
+const { graphqlEndpoint } = require('../../../../swift.config');
 
 /**
  *
@@ -17,44 +17,41 @@ const { modules, graphqlEndpoint } = require('../../../../swift.config');
  * This sample uses SandboxEnvironment. In production, use LiveEnvironment.
  *
  */
-const query = `{
-    storeConfig {
-        paypal_key {
-            cancel_url
-            client_id
-            client_secret
-            disable_funding
-            intent
-            key_data
-            key_token
-            path
-            redirect_url
-        }
-    }
-}`;
-
 function environment() {
-                           // fetch(`${graphqlEndpoint[getAppEnv()]}?${encodeURI(query)}`, {
-                           //     method: 'GET',
-                           //     headers: {
-                           //         Authorization: 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a',
-                           //     },
-                           // })
-                           //     .then((res) => {
-                           //         console.log(res.json());
-                           //         const appEnv = getAppEnv();
-                           //         const clientId = modules.paypal.clientId[appEnv];
-                           //         const clientSecret = modules.paypal.clientSecret[appEnv];
+    const query = `{
+        storeConfig {
+            paypal_key {
+                cancel_url
+                client_id
+                client_secret
+                disable_funding
+                intent
+                key_data
+                key_token
+                path
+                return_url
+            }
+        }
+    }`;
 
-                           //         return new checkoutNodeJssdk.core.SandboxEnvironment(clientId, clientSecret);
-                           //     })
-                           //     .catch(() => {});
-                           const appEnv = getAppEnv();
-                           const clientId = modules.paypal.clientId[appEnv];
-                           const clientSecret = modules.paypal.clientSecret[appEnv];
+    fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
+        method: 'GET',
+        headers: {
+            Authorization: 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a',
+            'Content-Type': 'application/json',
+        },
+    })
+        .then((response) => response.json())
+        .then((responseJson) => {
+            const clientId = responseJson.data.storeConfig.paypal_key.client_id;
+            const clientSecret = responseJson.data.storeConfig.paypal_key.client_secret;
 
-                           return new checkoutNodeJssdk.core.SandboxEnvironment(clientId, clientSecret);
-                       }
+            return new checkoutNodeJssdk.core.SandboxEnvironment(clientId, clientSecret);
+        })
+        .catch((err) => {
+            console.log(err);
+        });
+}
 
 /**
  *
diff --git a/core/helpers/encryption.js b/core/helpers/encryption.js
index 96455956b..f5a3e844e 100644
--- a/core/helpers/encryption.js
+++ b/core/helpers/encryption.js
@@ -1,19 +1,54 @@
 const crypto = require('crypto');
-const {
-    encryption: { key, algorithm },
-} = require('../../swift-server.config');
+const { graphqlEndpoint } = require('../../swift.config');
+const { getAppEnv } = require('./env');
 
-const iv = key.substr(0, 16);
+const query = `{
+    storeConfig {
+        swift_server {
+            session_secret
+        }
+    }
+}`;
 
 const encrypt = (text) => {
-    const cipher = crypto.createCipheriv(algorithm, key, iv);
+    const encryption = fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
+        method: 'GET',
+        headers: {
+            'Content-Type': 'application/json',
+        },
+    })
+        .then((response) => response.json())
+        .then((responseJson) => ({
+            algorithm: responseJson.data.storeConfig.swift_server.algorithm,
+            key: responseJson.data.storeConfig.swift_server.encryption_key,
+        }))
+        .catch((err) => {
+            console.log(err);
+        });
+    const iv = encryption.encryption_key.substr(0, 16);
+    const cipher = crypto.createCipheriv(encryption.algorithm, encryption.encryption_key, iv);
     let crypted = cipher.update(text, 'utf8', 'base64');
     crypted += cipher.final('base64');
     return crypted;
 };
 
 const decrypt = (text) => {
-    const decipher = crypto.createDecipheriv(algorithm, key, iv);
+    const encryption = fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
+        method: 'GET',
+        headers: {
+            'Content-Type': 'application/json',
+        },
+    })
+        .then((response) => response.json())
+        .then((responseJson) => ({
+            algorithm: responseJson.data.storeConfig.swift_server.algorithm,
+            key: responseJson.data.storeConfig.swift_server.encryption_key,
+        }))
+        .catch((err) => {
+            console.log(err);
+        });
+    const iv = encryption.encryption_key.substr(0, 16);
+    const decipher = crypto.createDecipheriv(encryption.algorithm, encryption.encryption_key, iv);
     let dec = decipher.update(text, 'base64', 'utf8');
     dec += decipher.final('utf8');
     return dec;
diff --git a/core/lib/firebase/index.js b/core/lib/firebase/index.js
index b21bc428b..a6a54c8b7 100644
--- a/core/lib/firebase/index.js
+++ b/core/lib/firebase/index.js
@@ -1,10 +1,45 @@
+import { graphqlEndpoint } from '@config';
+import { getAppEnv } from '@helpers/env';
 import firebase from 'firebase/app';
-import { features } from '@config';
 
 require('firebase/auth');
 require('firebase/messaging');
 
-// For Firebase JS SDK v7.20.0 and later, measurementId is optional
-const firebaseConfig = features.firebase.config;
+const query = `{
+    storeConfig {
+        firebase_api_key {
+            api_key
+            auth_domain
+            database_url
+            project_id
+            storage_bucket
+            messaging_sender_id
+            app_id
+            measurement_id
+        }
+    }
+}`;
+
+const firebaseConfig = fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
+    method: 'GET',
+    headers: {
+        Authorization: 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a',
+        'Content-Type': 'application/json',
+    },
+})
+    .then((response) => response.json())
+    .then((responseJson) => ({
+        apiKey: responseJson.data.storeConfig.firebase_api_key.api_key,
+        authDomain: responseJson.data.storeConfig.firebase_api_key.auth_domain,
+        databaseURL: responseJson.data.storeConfig.firebase_api_key.database_url,
+        projectId: responseJson.data.storeConfig.firebase_api_key.project_id,
+        storageBucket: responseJson.data.storeConfig.firebase_api_key.storage_bucket,
+        messagingSenderId: responseJson.data.storeConfig.firebase_api_key.messaging_sender_id,
+        appId: responseJson.data.storeConfig.firebase_api_key.app_id,
+        measurementId: responseJson.data.storeConfig.firebase_api_key.measurement_id,
+    }))
+    .catch((err) => {
+        console.log(err);
+    });
 
 export default !firebase.apps.length ? firebase.initializeApp(firebaseConfig) : firebase.app();
diff --git a/core/modules/home/pages/default/components/index.js b/core/modules/home/pages/default/components/index.js
index c06cb8629..317acf126 100644
--- a/core/modules/home/pages/default/components/index.js
+++ b/core/modules/home/pages/default/components/index.js
@@ -1,10 +1,10 @@
 /* eslint-disable react/destructuring-assignment */
 /* eslint-disable max-len */
-import * as React from 'react';
-import dynamic from 'next/dynamic';
-import useStyles from '@core_modules/home/pages/default/components/style';
 import CmsPage from '@core_modules/cms/pages/default';
+import useStyles from '@core_modules/home/pages/default/components/style';
 import classNames from 'classnames';
+import dynamic from 'next/dynamic';
+import * as React from 'react';
 
 const BannerSlider = dynamic(() => import('@core_modules/home/pages/default/components/Banner'));
 const FeaturedProducts = dynamic(() => import('@core_modules/home/pages/default/components/FeaturedProducts'));
@@ -14,9 +14,7 @@ const Content = (props) => {
     const styles = useStyles();
     let useCmsPage = {};
 
-    const {
-        homePageConfig, storeConfig: config, ...other
-    } = props;
+    const { homePageConfig, storeConfig: config, ...other } = props;
 
     let storeConfig = config;
 
diff --git a/core/services/graphql/schema/config.js b/core/services/graphql/schema/config.js
index 6c9630584..aaab29a90 100644
--- a/core/services/graphql/schema/config.js
+++ b/core/services/graphql/schema/config.js
@@ -301,9 +301,6 @@ export const storeConfig = `
       aw_blog_related_products_display_add_to_cart
       weltpixel_RecentlyViewedBar_general_enable
       weltpixel_thankyoupage_create_account_enable
-      payment_travelokapay_public_key
-      payment_travelokapay_user_id
-      payment_travelokapay_bin_whitelist
       pin_location_latitude
       pin_location_longitude
       minimum_order_amount
diff --git a/server.js b/server.js
index 4a8c3f1f5..0656429da 100644
--- a/server.js
+++ b/server.js
@@ -20,9 +20,9 @@ const app = next({ dev: process.env.NODE_ENV !== 'production' });
 const handle = app.getRequestHandler();
 
 const {
-    expiredToken, nossrCache, features, assetsVersion,
+    expiredToken, nossrCache, features, assetsVersion, graphqlEndpoint,
 } = require('./swift.config');
-const { SESSION_SECRET } = require('./swift-server.config');
+const { getAppEnv } = require('./core/helpers/env');
 const generateXml = require('./core/api/rest/xml');
 const captchaValidation = require('./core/api/rest/captcha');
 const firebaseValidation = require('./core/api/rest/firebase-cloud-messaging');
@@ -84,19 +84,13 @@ async function renderAndCache(req, res) {
 }
 
 (async () => {
-    const botList = fs.readFileSync('./botlist.txt')
-        .toString()
-        .split('\n')
-        .filter(Boolean);
+    const botList = fs.readFileSync('./botlist.txt').toString().split('\n').filter(Boolean);
 
     await app.prepare();
     const server = express();
 
     // block bot
-    server.use(blocker(
-        botList,
-        { text: 'Unauthorized request' },
-    ));
+    server.use(blocker(botList, { text: 'Unauthorized request' }));
 
     server.use(cookieParser());
     // disable x-powered-by
@@ -136,6 +130,27 @@ async function renderAndCache(req, res) {
 
     await nextI18next.initPromise;
     // server.use(nextI18NextMiddleware(nextI18next));
+
+    const query = `{
+        storeConfig {
+            swift_server {
+                session_secret
+            }
+        }
+    }`;
+
+    const SESSION_SECRET = fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
+        method: 'GET',
+        headers: {
+            Authorization: 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a',
+            'Content-Type': 'application/json',
+        },
+    })
+        .then((response) => response.json())
+        .then((responseJson) => responseJson.data.storeConfig.swift_server.session_secret)
+        .catch((err) => {
+            console.log(err);
+        });
     server.use(
         cookieSession({
             name: 'qwt-swift',

From b0d4e3b0ef5564837afcdb08d3c67aec1214c2a9 Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Thu, 27 Oct 2022 15:55:03 +0700
Subject: [PATCH 03/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Moving auth key to ENV

---
 core/api/graphql/remote/index.js          |  8 +++-----
 core/api/graphql/request/index.js         | 12 ++++++------
 core/api/rest/firebase-cloud-messaging.js |  4 ++--
 core/api/rest/paypal/client.js            |  4 ++--
 core/helpers/env.js                       |  9 +++++++++
 core/lib/firebase/index.js                |  4 ++--
 package.json                              | 14 +++++++-------
 server.js                                 |  4 ++--
 8 files changed, 33 insertions(+), 26 deletions(-)

diff --git a/core/api/graphql/remote/index.js b/core/api/graphql/remote/index.js
index a45166a51..d6b514df5 100644
--- a/core/api/graphql/remote/index.js
+++ b/core/api/graphql/remote/index.js
@@ -4,11 +4,9 @@ const { print } = require('graphql');
 const { wrapSchema, introspectSchema } = require('@graphql-tools/wrap');
 const { graphqlEndpoint, storeCode } = require('../../../../swift.config');
 const { decrypt } = require('../../../helpers/encryption');
-const { getAppEnv } = require('../../../helpers/env');
+const { getAppEnv, getHeaderEnv } = require('../../../helpers/env');
 
-const executor = async ({
-    document, variables, context,
-}) => {
+const executor = async ({ document, variables, context }) => {
     try {
         let token = '';
         let checkoutToken = '';
@@ -30,7 +28,7 @@ const executor = async ({
         if (token && token !== '') {
             additionalHeader.Authorization = `Bearer ${decrypt(token)}`;
         } else {
-            token = 'z42nzj61mfsbe5ys0qo2h5vha1icxe5a';
+            token = `Bearer ${getHeaderEnv()}`;
             additionalHeader.Authorization = `Bearer ${token}`;
         }
         if (checkoutToken && checkoutToken !== '') {
diff --git a/core/api/graphql/request/index.js b/core/api/graphql/request/index.js
index 5d2bb376b..69e8a9964 100644
--- a/core/api/graphql/request/index.js
+++ b/core/api/graphql/request/index.js
@@ -4,23 +4,23 @@ const { GraphQLClient } = require('graphql-request');
 const { graphqlEndpoint, storeCode } = require('../../../../swift.config');
 
 const { decrypt } = require('../../../helpers/encryption');
-const { getAppEnv } = require('../../../helpers/env');
+const { getAppEnv, getHeaderEnv } = require('../../../helpers/env');
 
 function requestGraph(query, variables = {}, context = {}, config = {}) {
     let token = '';
     if (config.token) {
         if (query.includes('snap_client_key')) {
-            token = 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a';
+            token = `Bearer ${getHeaderEnv()}`;
         } else token = `Bearer ${config.token}`;
     } else if (context.session || context.headers) {
         if (query.includes('snap_client_key')) {
-            token = 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a';
+            token = `Bearer ${getHeaderEnv()}`;
         } else {
             token = context.session.token
                 ? `Bearer ${decrypt(context.session.token)}`
                 : context.headers.authorization
-                ? context.headers.authorization
-                : '';
+                    ? context.headers.authorization
+                    : '';
         }
     }
     return new Promise((resolve) => {
@@ -28,7 +28,7 @@ function requestGraph(query, variables = {}, context = {}, config = {}) {
         if (token && token !== '') {
             additionalHeader.Authorization = token;
         } else if (query.includes('snap_client_key')) {
-            token = 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a';
+            token = `Bearer ${getHeaderEnv()}`;
             additionalHeader.Authorization = token;
         }
         const headers = {
diff --git a/core/api/rest/firebase-cloud-messaging.js b/core/api/rest/firebase-cloud-messaging.js
index 8b149d494..f8d30f71d 100644
--- a/core/api/rest/firebase-cloud-messaging.js
+++ b/core/api/rest/firebase-cloud-messaging.js
@@ -1,4 +1,4 @@
-const { getAppEnv } = require('../../helpers/env');
+const { getAppEnv, getHeaderEnv } = require('../../helpers/env');
 const { graphqlEndpoint } = require('../../../swift.config');
 
 /* eslint-disable no-unused-vars */
@@ -18,7 +18,7 @@ module.exports = (req, res) => {
         fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
             method: 'GET',
             headers: {
-                Authorization: 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a',
+                Authorization: `Bearer ${getHeaderEnv()}`,
                 'Content-Type': 'application/json',
             },
         })
diff --git a/core/api/rest/paypal/client.js b/core/api/rest/paypal/client.js
index 01210af93..2c89c4132 100644
--- a/core/api/rest/paypal/client.js
+++ b/core/api/rest/paypal/client.js
@@ -8,7 +8,7 @@
  * PayPal Node JS SDK dependency
  */
 const checkoutNodeJssdk = require('@paypal/checkout-server-sdk');
-const { getAppEnv } = require('../../../helpers/env');
+const { getAppEnv, getHeaderEnv } = require('../../../helpers/env');
 const { graphqlEndpoint } = require('../../../../swift.config');
 
 /**
@@ -37,7 +37,7 @@ function environment() {
     fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
         method: 'GET',
         headers: {
-            Authorization: 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a',
+            Authorization: `Bearer ${getHeaderEnv()}`,
             'Content-Type': 'application/json',
         },
     })
diff --git a/core/helpers/env.js b/core/helpers/env.js
index 0d1d9753f..78db7616e 100644
--- a/core/helpers/env.js
+++ b/core/helpers/env.js
@@ -6,6 +6,15 @@ const getAppEnv = () => {
     return process.env.APP_ENV;
 };
 
+const getHeaderEnv = () => {
+    if (typeof window !== 'undefined') {
+        return window.HEADER_ENV;
+    }
+
+    return process.env.HEADER_ENV;
+};
+
 module.exports = {
     getAppEnv,
+    getHeaderEnv,
 };
diff --git a/core/lib/firebase/index.js b/core/lib/firebase/index.js
index a6a54c8b7..d5167cb87 100644
--- a/core/lib/firebase/index.js
+++ b/core/lib/firebase/index.js
@@ -1,5 +1,5 @@
 import { graphqlEndpoint } from '@config';
-import { getAppEnv } from '@helpers/env';
+import { getAppEnv, getHeaderEnv } from '@helpers/env';
 import firebase from 'firebase/app';
 
 require('firebase/auth');
@@ -23,7 +23,7 @@ const query = `{
 const firebaseConfig = fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
     method: 'GET',
     headers: {
-        Authorization: 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a',
+        Authorization: `Bearer ${getHeaderEnv()}`,
         'Content-Type': 'application/json',
     },
 })
diff --git a/package.json b/package.json
index 0cb6c3b3c..edb0879ca 100644
--- a/package.json
+++ b/package.json
@@ -4,14 +4,14 @@
   "private": true,
   "scripts": {
     "assets:build": "webpack",
-    "local": "cross-env APP_ENV=local NODE_ENV=development node server.js",
-    "local:start": "cross-env APP_ENV=local NODE_ENV=production node server.js",
+    "local": "cross-env APP_ENV=local NODE_ENV=development HEADER_ENV=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node server.js",
+    "local:start": "cross-env APP_ENV=local NODE_ENV=production HEADER_ENV=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node server.js",
     "dev": "cross-env APP_ENV=dev NODE_ENV=development node --max-http-header-size=16384 server.js",
-    "dev:start": "cross-env APP_ENV=dev NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 node --max-http-header-size=16384 server.js",
-    "stage": "cross-env APP_ENV=stage NODE_ENV=development node --max-http-header-size=16384 server.js",
-    "stage:start": "cross-env APP_ENV=stage NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 node --max-http-header-size=16384 server.js",
-    "prod": "cross-env APP_ENV=prod NODE_ENV=development node --max-http-header-size=16384 server.js",
-    "prod:start": "cross-env APP_ENV=prod NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 node --max-http-header-size=16384 server.js",
+    "dev:start": "cross-env APP_ENV=dev NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 HEADER_ENV=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "stage": "cross-env APP_ENV=stage NODE_ENV=development HEADER_ENV=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "stage:start": "cross-env APP_ENV=stage NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 HEADER_ENV=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "prod": "cross-env APP_ENV=prod NODE_ENV=development HEADER_ENV=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "prod:start": "cross-env APP_ENV=prod NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 HEADER_ENV=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
     "pretest": "./node_modules/.bin/eslint --ignore-path .gitignore . --fix",
     "start": "cross-env node --max-http-header-size=16384 server.js",
     "generate-certs": "mkdir certs && openssl req -x509 -days 365 -newkey rsa:2048 -nodes -sha256 -keyout certs/privateKey.key -out certs/certificate.crt",
diff --git a/server.js b/server.js
index 0656429da..8b810b273 100644
--- a/server.js
+++ b/server.js
@@ -22,7 +22,7 @@ const handle = app.getRequestHandler();
 const {
     expiredToken, nossrCache, features, assetsVersion, graphqlEndpoint,
 } = require('./swift.config');
-const { getAppEnv } = require('./core/helpers/env');
+const { getAppEnv, getHeaderEnv } = require('./core/helpers/env');
 const generateXml = require('./core/api/rest/xml');
 const captchaValidation = require('./core/api/rest/captcha');
 const firebaseValidation = require('./core/api/rest/firebase-cloud-messaging');
@@ -142,7 +142,7 @@ async function renderAndCache(req, res) {
     const SESSION_SECRET = fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
         method: 'GET',
         headers: {
-            Authorization: 'Bearer z42nzj61mfsbe5ys0qo2h5vha1icxe5a',
+            Authorization: `Bearer ${getHeaderEnv()}`,
             'Content-Type': 'application/json',
         },
     })

From c6553f4c9cdce2be870d13b2f629919797380c9f Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Fri, 28 Oct 2022 06:17:34 +0700
Subject: [PATCH 04/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Add README.md and change naming auth key

---
 README.md                                 | 38 +++++++++++++++++++++++
 core/api/graphql/remote/index.js          |  4 +--
 core/api/graphql/request/index.js         |  8 ++---
 core/api/rest/firebase-cloud-messaging.js |  4 +--
 core/api/rest/paypal/client.js            |  4 +--
 core/helpers/env.js                       |  8 ++---
 core/lib/firebase/index.js                |  4 +--
 package.json                              | 14 ++++-----
 server.js                                 |  4 +--
 9 files changed, 63 insertions(+), 25 deletions(-)

diff --git a/README.md b/README.md
index f3d6e8225..a5510fe2b 100644
--- a/README.md
+++ b/README.md
@@ -143,3 +143,41 @@ patch -p1 --forward < patches/fix_loadmore_plp.patch || true
 ######################### END of line patch ##############################
 
 ```
+
+# Authorization Key
+Authorization key is a key that retrieved from Backoffice to get sensitive PWA configurations such as traveloka API key, xendit key, paypal key, etc.
+### How to get authorization key for Swift PWA project
+
+1. Open backoffice
+2. Click on systems menu
+3. Click on integrations menu
+4. Click on add new integration
+5. Fill in the name and current user identity verification (this is backoffice account/admin password)
+6. On the API section, select resource access to "All"
+7. Click save
+8. And then on the Integrations list, click "Activate" on the key you just created
+9. Click Allow
+10. Copy the "Access Token" part
+11. Open `package.json` file and add the key on each start command on the scripts section like this `ACCESS_KEY=[your access token]` or you can look at the example directly from `package.json` file
+```
+"scripts": {
+    "assets:build": "webpack",
+    "local": "cross-env APP_ENV=local NODE_ENV=development ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node server.js",
+    "local:start": "cross-env APP_ENV=local NODE_ENV=production ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node server.js",
+    "dev": "cross-env APP_ENV=dev NODE_ENV=development node --max-http-header-size=16384 server.js",
+    "dev:start": "cross-env APP_ENV=dev NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "stage": "cross-env APP_ENV=stage NODE_ENV=development ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "stage:start": "cross-env APP_ENV=stage NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "prod": "cross-env APP_ENV=prod NODE_ENV=development ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "prod:start": "cross-env APP_ENV=prod NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "pretest": "./node_modules/.bin/eslint --ignore-path .gitignore . --fix",
+    "start": "cross-env node --max-http-header-size=16384 server.js",
+    "generate-certs": "mkdir certs && openssl req -x509 -days 365 -newkey rsa:2048 -nodes -sha256 -keyout certs/privateKey.key -out certs/certificate.crt",
+    "build": "concurrently \"yarn assets:build\" \"next build\"",
+    "export": "next export",
+    "clean": "cross-env rimraf ./.next ./out",
+    "release": "cross-env NODE_ENV=production npm run clean && npm run build && npm run export",
+    "test": "jest --watch",
+    "test:ci": "jest --ci"
+  },
+```
diff --git a/core/api/graphql/remote/index.js b/core/api/graphql/remote/index.js
index d6b514df5..ff38abf33 100644
--- a/core/api/graphql/remote/index.js
+++ b/core/api/graphql/remote/index.js
@@ -4,7 +4,7 @@ const { print } = require('graphql');
 const { wrapSchema, introspectSchema } = require('@graphql-tools/wrap');
 const { graphqlEndpoint, storeCode } = require('../../../../swift.config');
 const { decrypt } = require('../../../helpers/encryption');
-const { getAppEnv, getHeaderEnv } = require('../../../helpers/env');
+const { getAppEnv, getAccessEnv } = require('../../../helpers/env');
 
 const executor = async ({ document, variables, context }) => {
     try {
@@ -28,7 +28,7 @@ const executor = async ({ document, variables, context }) => {
         if (token && token !== '') {
             additionalHeader.Authorization = `Bearer ${decrypt(token)}`;
         } else {
-            token = `Bearer ${getHeaderEnv()}`;
+            token = `Bearer ${getAccessEnv()}`;
             additionalHeader.Authorization = `Bearer ${token}`;
         }
         if (checkoutToken && checkoutToken !== '') {
diff --git a/core/api/graphql/request/index.js b/core/api/graphql/request/index.js
index 69e8a9964..b7ff7c6c1 100644
--- a/core/api/graphql/request/index.js
+++ b/core/api/graphql/request/index.js
@@ -4,17 +4,17 @@ const { GraphQLClient } = require('graphql-request');
 const { graphqlEndpoint, storeCode } = require('../../../../swift.config');
 
 const { decrypt } = require('../../../helpers/encryption');
-const { getAppEnv, getHeaderEnv } = require('../../../helpers/env');
+const { getAppEnv, getAccessEnv } = require('../../../helpers/env');
 
 function requestGraph(query, variables = {}, context = {}, config = {}) {
     let token = '';
     if (config.token) {
         if (query.includes('snap_client_key')) {
-            token = `Bearer ${getHeaderEnv()}`;
+            token = `Bearer ${getAccessEnv()}`;
         } else token = `Bearer ${config.token}`;
     } else if (context.session || context.headers) {
         if (query.includes('snap_client_key')) {
-            token = `Bearer ${getHeaderEnv()}`;
+            token = `Bearer ${getAccessEnv()}`;
         } else {
             token = context.session.token
                 ? `Bearer ${decrypt(context.session.token)}`
@@ -28,7 +28,7 @@ function requestGraph(query, variables = {}, context = {}, config = {}) {
         if (token && token !== '') {
             additionalHeader.Authorization = token;
         } else if (query.includes('snap_client_key')) {
-            token = `Bearer ${getHeaderEnv()}`;
+            token = `Bearer ${getAccessEnv()}`;
             additionalHeader.Authorization = token;
         }
         const headers = {
diff --git a/core/api/rest/firebase-cloud-messaging.js b/core/api/rest/firebase-cloud-messaging.js
index f8d30f71d..7bc78d0b8 100644
--- a/core/api/rest/firebase-cloud-messaging.js
+++ b/core/api/rest/firebase-cloud-messaging.js
@@ -1,4 +1,4 @@
-const { getAppEnv, getHeaderEnv } = require('../../helpers/env');
+const { getAppEnv, getAccessEnv } = require('../../helpers/env');
 const { graphqlEndpoint } = require('../../../swift.config');
 
 /* eslint-disable no-unused-vars */
@@ -18,7 +18,7 @@ module.exports = (req, res) => {
         fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
             method: 'GET',
             headers: {
-                Authorization: `Bearer ${getHeaderEnv()}`,
+                Authorization: `Bearer ${getAccessEnv()}`,
                 'Content-Type': 'application/json',
             },
         })
diff --git a/core/api/rest/paypal/client.js b/core/api/rest/paypal/client.js
index 2c89c4132..0b08fe6df 100644
--- a/core/api/rest/paypal/client.js
+++ b/core/api/rest/paypal/client.js
@@ -8,7 +8,7 @@
  * PayPal Node JS SDK dependency
  */
 const checkoutNodeJssdk = require('@paypal/checkout-server-sdk');
-const { getAppEnv, getHeaderEnv } = require('../../../helpers/env');
+const { getAppEnv, getAccessEnv } = require('../../../helpers/env');
 const { graphqlEndpoint } = require('../../../../swift.config');
 
 /**
@@ -37,7 +37,7 @@ function environment() {
     fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
         method: 'GET',
         headers: {
-            Authorization: `Bearer ${getHeaderEnv()}`,
+            Authorization: `Bearer ${getAccessEnv()}`,
             'Content-Type': 'application/json',
         },
     })
diff --git a/core/helpers/env.js b/core/helpers/env.js
index 78db7616e..3227cc6bb 100644
--- a/core/helpers/env.js
+++ b/core/helpers/env.js
@@ -6,15 +6,15 @@ const getAppEnv = () => {
     return process.env.APP_ENV;
 };
 
-const getHeaderEnv = () => {
+const getAccessEnv = () => {
     if (typeof window !== 'undefined') {
-        return window.HEADER_ENV;
+        return window.ACCESS_KEY;
     }
 
-    return process.env.HEADER_ENV;
+    return process.env.ACCESS_KEY;
 };
 
 module.exports = {
     getAppEnv,
-    getHeaderEnv,
+    getAccessEnv,
 };
diff --git a/core/lib/firebase/index.js b/core/lib/firebase/index.js
index d5167cb87..2a5db1fd1 100644
--- a/core/lib/firebase/index.js
+++ b/core/lib/firebase/index.js
@@ -1,5 +1,5 @@
 import { graphqlEndpoint } from '@config';
-import { getAppEnv, getHeaderEnv } from '@helpers/env';
+import { getAccessEnv, getAppEnv } from '@helpers/env';
 import firebase from 'firebase/app';
 
 require('firebase/auth');
@@ -23,7 +23,7 @@ const query = `{
 const firebaseConfig = fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
     method: 'GET',
     headers: {
-        Authorization: `Bearer ${getHeaderEnv()}`,
+        Authorization: `Bearer ${getAccessEnv()}`,
         'Content-Type': 'application/json',
     },
 })
diff --git a/package.json b/package.json
index edb0879ca..067355d7d 100644
--- a/package.json
+++ b/package.json
@@ -4,14 +4,14 @@
   "private": true,
   "scripts": {
     "assets:build": "webpack",
-    "local": "cross-env APP_ENV=local NODE_ENV=development HEADER_ENV=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node server.js",
-    "local:start": "cross-env APP_ENV=local NODE_ENV=production HEADER_ENV=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node server.js",
+    "local": "cross-env APP_ENV=local NODE_ENV=development ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node server.js",
+    "local:start": "cross-env APP_ENV=local NODE_ENV=production ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node server.js",
     "dev": "cross-env APP_ENV=dev NODE_ENV=development node --max-http-header-size=16384 server.js",
-    "dev:start": "cross-env APP_ENV=dev NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 HEADER_ENV=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
-    "stage": "cross-env APP_ENV=stage NODE_ENV=development HEADER_ENV=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
-    "stage:start": "cross-env APP_ENV=stage NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 HEADER_ENV=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
-    "prod": "cross-env APP_ENV=prod NODE_ENV=development HEADER_ENV=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
-    "prod:start": "cross-env APP_ENV=prod NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 HEADER_ENV=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "dev:start": "cross-env APP_ENV=dev NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "stage": "cross-env APP_ENV=stage NODE_ENV=development ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "stage:start": "cross-env APP_ENV=stage NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "prod": "cross-env APP_ENV=prod NODE_ENV=development ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "prod:start": "cross-env APP_ENV=prod NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
     "pretest": "./node_modules/.bin/eslint --ignore-path .gitignore . --fix",
     "start": "cross-env node --max-http-header-size=16384 server.js",
     "generate-certs": "mkdir certs && openssl req -x509 -days 365 -newkey rsa:2048 -nodes -sha256 -keyout certs/privateKey.key -out certs/certificate.crt",
diff --git a/server.js b/server.js
index 8b810b273..5f52204ee 100644
--- a/server.js
+++ b/server.js
@@ -22,7 +22,7 @@ const handle = app.getRequestHandler();
 const {
     expiredToken, nossrCache, features, assetsVersion, graphqlEndpoint,
 } = require('./swift.config');
-const { getAppEnv, getHeaderEnv } = require('./core/helpers/env');
+const { getAppEnv, getAccessEnv } = require('./core/helpers/env');
 const generateXml = require('./core/api/rest/xml');
 const captchaValidation = require('./core/api/rest/captcha');
 const firebaseValidation = require('./core/api/rest/firebase-cloud-messaging');
@@ -142,7 +142,7 @@ async function renderAndCache(req, res) {
     const SESSION_SECRET = fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
         method: 'GET',
         headers: {
-            Authorization: `Bearer ${getHeaderEnv()}`,
+            Authorization: `Bearer ${getAccessEnv()}`,
             'Content-Type': 'application/json',
         },
     })

From 5689d2d808c51c572691285ba479d855b85ffe53 Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Fri, 4 Nov 2022 13:59:53 +0700
Subject: [PATCH 05/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Refactor private config method

---
 .env                                          |  1 +
 .gitignore                                    |  1 -
 core/api/graphql/remote/index.js              |  5 +-
 core/api/graphql/request/index.js             | 11 ++-
 core/api/rest/encryptInit.js                  | 33 ++++++++
 core/api/rest/firebaseInit.js                 | 45 +++++++++++
 core/api/rest/geocoding.js                    |  2 +-
 core/helpers/clientEncryption.js              | 25 +++++++
 core/helpers/encryption.js                    | 51 +++++++------
 core/helpers/env.js                           |  8 +-
 core/lib/firebase/index.js                    | 75 ++++++++++---------
 .../commons/GoogleMapsAutocomplete/index.js   | 13 ++--
 core/modules/theme/pages/_app.js              | 74 +++++++++---------
 package.json                                  | 19 ++---
 server.js                                     | 33 ++++----
 swift.config.js                               |  4 +-
 yarn.lock                                     |  5 ++
 17 files changed, 263 insertions(+), 142 deletions(-)
 create mode 100644 .env
 create mode 100644 core/api/rest/encryptInit.js
 create mode 100644 core/api/rest/firebaseInit.js
 create mode 100644 core/helpers/clientEncryption.js

diff --git a/.env b/.env
new file mode 100644
index 000000000..6388ee6e5
--- /dev/null
+++ b/.env
@@ -0,0 +1 @@
+ACCESS_KEY="z42nzj61mfsbe5ys0qo2h5vha1icxe5a"
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index cd72e6652..be6acd6b5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -17,7 +17,6 @@
 
 # misc
 .DS_Store
-.env*
 .vscode/
 
 # debug
diff --git a/core/api/graphql/remote/index.js b/core/api/graphql/remote/index.js
index ff38abf33..508a6ccc3 100644
--- a/core/api/graphql/remote/index.js
+++ b/core/api/graphql/remote/index.js
@@ -4,7 +4,7 @@ const { print } = require('graphql');
 const { wrapSchema, introspectSchema } = require('@graphql-tools/wrap');
 const { graphqlEndpoint, storeCode } = require('../../../../swift.config');
 const { decrypt } = require('../../../helpers/encryption');
-const { getAppEnv, getAccessEnv } = require('../../../helpers/env');
+const { getAppEnv } = require('../../../helpers/env');
 
 const executor = async ({ document, variables, context }) => {
     try {
@@ -27,9 +27,6 @@ const executor = async ({ document, variables, context }) => {
         const url = graphqlEndpoint[appEnv] || graphqlEndpoint.prod;
         if (token && token !== '') {
             additionalHeader.Authorization = `Bearer ${decrypt(token)}`;
-        } else {
-            token = `Bearer ${getAccessEnv()}`;
-            additionalHeader.Authorization = `Bearer ${token}`;
         }
         if (checkoutToken && checkoutToken !== '') {
             additionalHeader['Checkout-Token'] = `${decrypt(checkoutToken)}`;
diff --git a/core/api/graphql/request/index.js b/core/api/graphql/request/index.js
index b7ff7c6c1..daebaed65 100644
--- a/core/api/graphql/request/index.js
+++ b/core/api/graphql/request/index.js
@@ -8,10 +8,13 @@ const { getAppEnv, getAccessEnv } = require('../../../helpers/env');
 
 function requestGraph(query, variables = {}, context = {}, config = {}) {
     let token = '';
+    console.log(query.includes('snap_client_key'));
     if (config.token) {
         if (query.includes('snap_client_key')) {
             token = `Bearer ${getAccessEnv()}`;
-        } else token = `Bearer ${config.token}`;
+        } else {
+            token = `Bearer ${config.token}`;
+        }
     } else if (context.session || context.headers) {
         if (query.includes('snap_client_key')) {
             token = `Bearer ${getAccessEnv()}`;
@@ -22,14 +25,14 @@ function requestGraph(query, variables = {}, context = {}, config = {}) {
                     ? context.headers.authorization
                     : '';
         }
+    } else if (query.includes('snap_client_key')) {
+        token = `Bearer ${getAccessEnv()}`;
     }
+
     return new Promise((resolve) => {
         const additionalHeader = storeCode ? { store: storeCode } : {};
         if (token && token !== '') {
             additionalHeader.Authorization = token;
-        } else if (query.includes('snap_client_key')) {
-            token = `Bearer ${getAccessEnv()}`;
-            additionalHeader.Authorization = token;
         }
         const headers = {
             ...additionalHeader,
diff --git a/core/api/rest/encryptInit.js b/core/api/rest/encryptInit.js
new file mode 100644
index 000000000..dda5a3bd8
--- /dev/null
+++ b/core/api/rest/encryptInit.js
@@ -0,0 +1,33 @@
+const { getAccessEnv } = require('../../helpers/env');
+const { encrypt } = require('../../helpers/clientEncryption');
+
+module.exports = (req, res) => {
+    const { endpoint } = req.body;
+
+    const query = `{
+        storeConfig {
+            swift_server {
+                algorithm
+                encryption_key
+            }
+        }
+    }`;
+
+    fetch(`${endpoint}?query=${encodeURI(query)}`, {
+        method: 'GET',
+        headers: {
+            Authorization: `Bearer ${getAccessEnv()}`,
+            'Content-Type': 'application/json',
+        },
+    })
+        .then((response) => response.json())
+        .then((responseJson) => {
+            res.status(200).json({
+                algorithm: encrypt(responseJson.data.storeConfig.swift_server.algorithm),
+                encryption_key: encrypt(responseJson.data.storeConfig.swift_server.encryption_key),
+            });
+        })
+        .catch((e) => {
+            res.status(500).json(e);
+        });
+};
diff --git a/core/api/rest/firebaseInit.js b/core/api/rest/firebaseInit.js
new file mode 100644
index 000000000..db35e7edb
--- /dev/null
+++ b/core/api/rest/firebaseInit.js
@@ -0,0 +1,45 @@
+const { getAccessEnv } = require('../../helpers/env');
+const { encrypt } = require('../../helpers/clientEncryption');
+
+module.exports = async (req, res) => {
+    const { endpoint } = req.body;
+
+    const query = `{
+        storeConfig {
+            firebase_api_key {
+                api_key
+                auth_domain
+                database_url
+                project_id
+                storage_bucket
+                messaging_sender_id
+                app_id
+                measurement_id
+            }
+        }
+    }`;
+
+    await fetch(`${endpoint}?query=${encodeURI(query)}`, {
+        method: 'GET',
+        headers: {
+            Authorization: `Bearer ${getAccessEnv()}`,
+            'Content-Type': 'application/json',
+        },
+    })
+        .then((response) => response.json())
+        .then((responseJson) => {
+            res.status(200).json({
+                apiKey: encrypt(responseJson.data.storeConfig.firebase_api_key.api_key),
+                authDomain: encrypt(responseJson.data.storeConfig.firebase_api_key.auth_domain),
+                databaseURL: encrypt(responseJson.data.storeConfig.firebase_api_key.database_url),
+                projectId: encrypt(responseJson.data.storeConfig.firebase_api_key.project_id),
+                storageBucket: encrypt(responseJson.data.storeConfig.firebase_api_key.storage_bucket),
+                messagingSenderId: encrypt(responseJson.data.storeConfig.firebase_api_key.messaging_sender_id),
+                appId: encrypt(responseJson.data.storeConfig.firebase_api_key.app_id),
+                measurementId: encrypt(responseJson.data.storeConfig.firebase_api_key.measurement_id),
+            });
+        })
+        .catch((e) => {
+            res.status(500).json(e);
+        });
+};
diff --git a/core/api/rest/geocoding.js b/core/api/rest/geocoding.js
index b22329dca..5bb72531e 100644
--- a/core/api/rest/geocoding.js
+++ b/core/api/rest/geocoding.js
@@ -1,4 +1,4 @@
-const { decrypt } = require('../../helpers/encryption');
+const { decrypt } = require('../../helpers/clientEncryption');
 
 module.exports = (req, res) => {
     const { query, gmapApiKey } = req.body;
diff --git a/core/helpers/clientEncryption.js b/core/helpers/clientEncryption.js
new file mode 100644
index 000000000..19980c839
--- /dev/null
+++ b/core/helpers/clientEncryption.js
@@ -0,0 +1,25 @@
+const crypto = require('crypto');
+
+const key = 'TXAjwm8k53PJG9NacLbyZavvQB2qBh43'; // TXAjwm8k53PJG9NacLbyZavvQB2qBh43 || asdasdd1212ads12!!!@**DADxx1
+const algorithm = 'aes-256-cbc';
+
+const iv = key.substr(0, 16);
+
+const encrypt = (text) => {
+    const cipher = crypto.createCipheriv(algorithm, key, iv);
+    let crypted = cipher.update(text, 'utf8', 'base64');
+    crypted += cipher.final('base64');
+    return crypted;
+};
+
+const decrypt = (text) => {
+    const decipher = crypto.createDecipheriv(algorithm, key, iv);
+    let dec = decipher.update(text, 'base64', 'utf8');
+    dec += decipher.final('utf8');
+    return dec;
+};
+
+module.exports = {
+    encrypt,
+    decrypt,
+};
diff --git a/core/helpers/encryption.js b/core/helpers/encryption.js
index f5a3e844e..c58e9c4b4 100644
--- a/core/helpers/encryption.js
+++ b/core/helpers/encryption.js
@@ -1,57 +1,64 @@
 const crypto = require('crypto');
 const { graphqlEndpoint } = require('../../swift.config');
-const { getAppEnv } = require('./env');
+const { getAppEnv, getAccessEnv } = require('./env');
 
 const query = `{
     storeConfig {
         swift_server {
-            session_secret
+            algorithm
+            encryption_key
         }
     }
 }`;
 
 const encrypt = (text) => {
-    const encryption = fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
+    fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
         method: 'GET',
         headers: {
             'Content-Type': 'application/json',
+            Authorization: `Bearer ${getAccessEnv()}`,
         },
     })
         .then((response) => response.json())
-        .then((responseJson) => ({
-            algorithm: responseJson.data.storeConfig.swift_server.algorithm,
-            key: responseJson.data.storeConfig.swift_server.encryption_key,
-        }))
+        .then((responseJson) => {
+            const iv = responseJson.data.storeConfig.swift_server.encryption_key.substr(0, 16);
+            const cipher = crypto.createCipheriv(
+                responseJson.data.storeConfig.swift_server.algorithm,
+                responseJson.data.storeConfig.swift_server.encryption_key,
+                iv,
+            );
+            let crypted = cipher.update(text, 'utf8', 'base64');
+            crypted += cipher.final('base64');
+            return crypted;
+        })
         .catch((err) => {
             console.log(err);
         });
-    const iv = encryption.encryption_key.substr(0, 16);
-    const cipher = crypto.createCipheriv(encryption.algorithm, encryption.encryption_key, iv);
-    let crypted = cipher.update(text, 'utf8', 'base64');
-    crypted += cipher.final('base64');
-    return crypted;
 };
 
 const decrypt = (text) => {
-    const encryption = fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
+    fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
         method: 'GET',
         headers: {
             'Content-Type': 'application/json',
+            Authorization: `Bearer ${getAccessEnv()}`,
         },
     })
         .then((response) => response.json())
-        .then((responseJson) => ({
-            algorithm: responseJson.data.storeConfig.swift_server.algorithm,
-            key: responseJson.data.storeConfig.swift_server.encryption_key,
-        }))
+        .then((responseJson) => {
+            const iv = responseJson.data.storeConfig.swift_server.encryption_key.substr(0, 16);
+            const decipher = crypto.createDecipheriv(
+                responseJson.data.storeConfig.swift_server.algorithm,
+                responseJson.data.storeConfig.swift_server.encryption_key,
+                iv,
+            );
+            let dec = decipher.update(text, 'base64', 'utf8');
+            dec += decipher.final('utf8');
+            return dec;
+        })
         .catch((err) => {
             console.log(err);
         });
-    const iv = encryption.encryption_key.substr(0, 16);
-    const decipher = crypto.createDecipheriv(encryption.algorithm, encryption.encryption_key, iv);
-    let dec = decipher.update(text, 'base64', 'utf8');
-    dec += decipher.final('utf8');
-    return dec;
 };
 
 module.exports = {
diff --git a/core/helpers/env.js b/core/helpers/env.js
index 3227cc6bb..3c5532dbc 100644
--- a/core/helpers/env.js
+++ b/core/helpers/env.js
@@ -6,13 +6,7 @@ const getAppEnv = () => {
     return process.env.APP_ENV;
 };
 
-const getAccessEnv = () => {
-    if (typeof window !== 'undefined') {
-        return window.ACCESS_KEY;
-    }
-
-    return process.env.ACCESS_KEY;
-};
+const getAccessEnv = () => process.env.ACCESS_KEY;
 
 module.exports = {
     getAppEnv,
diff --git a/core/lib/firebase/index.js b/core/lib/firebase/index.js
index 2a5db1fd1..3ed10edad 100644
--- a/core/lib/firebase/index.js
+++ b/core/lib/firebase/index.js
@@ -1,45 +1,48 @@
 import { graphqlEndpoint } from '@config';
+import { decrypt } from '@helpers/clientEncryption';
 import { getAccessEnv, getAppEnv } from '@helpers/env';
 import firebase from 'firebase/app';
 
 require('firebase/auth');
 require('firebase/messaging');
 
-const query = `{
-    storeConfig {
-        firebase_api_key {
-            api_key
-            auth_domain
-            database_url
-            project_id
-            storage_bucket
-            messaging_sender_id
-            app_id
-            measurement_id
-        }
+const initializeFirebase = async () => {
+    if (!firebase.apps.length) {
+        const request = await fetch('/firebase-init', {
+            method: 'POST',
+            headers: {
+                Authorization: `Bearer ${getAccessEnv()}`,
+                'Content-Type': 'application/json',
+            },
+            body: JSON.stringify({
+                endpoint: graphqlEndpoint[getAppEnv()],
+            }),
+        });
+        const response = await request.json();
+        const firebaseApp = firebase.initializeApp({
+            apiKey: decrypt(response.apiKey),
+            authDomain: decrypt(response.authDomain),
+            databaseURL: decrypt(response.databaseURL),
+            projectId: decrypt(response.projectId),
+            storageBucket: decrypt(response.storageBucket),
+            messagingSenderId: decrypt(response.messagingSenderId),
+            appId: decrypt(response.appId),
+            measurementId: decrypt(response.measurementId),
+        });
+        // .then((res) => res.json()).then((responseJson) => firebase.initializeApp({
+        //     apiKey: decrypt(responseJson.apiKey),
+        //     authDomain: decrypt(responseJson.authDomain),
+        //     databaseURL: decrypt(responseJson.databaseURL),
+        //     projectId: decrypt(responseJson.projectId),
+        //     storageBucket: decrypt(responseJson.storageBucket),
+        //     messagingSenderId: decrypt(responseJson.messagingSenderId),
+        //     appId: decrypt(responseJson.appId),
+        //     measurementId: decrypt(responseJson.measurementId),
+        // }))
+        //     .catch((err) => console.log(err));
+        return firebaseApp;
     }
-}`;
+    return firebase.app();
+};
 
-const firebaseConfig = fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
-    method: 'GET',
-    headers: {
-        Authorization: `Bearer ${getAccessEnv()}`,
-        'Content-Type': 'application/json',
-    },
-})
-    .then((response) => response.json())
-    .then((responseJson) => ({
-        apiKey: responseJson.data.storeConfig.firebase_api_key.api_key,
-        authDomain: responseJson.data.storeConfig.firebase_api_key.auth_domain,
-        databaseURL: responseJson.data.storeConfig.firebase_api_key.database_url,
-        projectId: responseJson.data.storeConfig.firebase_api_key.project_id,
-        storageBucket: responseJson.data.storeConfig.firebase_api_key.storage_bucket,
-        messagingSenderId: responseJson.data.storeConfig.firebase_api_key.messaging_sender_id,
-        appId: responseJson.data.storeConfig.firebase_api_key.app_id,
-        measurementId: responseJson.data.storeConfig.firebase_api_key.measurement_id,
-    }))
-    .catch((err) => {
-        console.log(err);
-    });
-
-export default !firebase.apps.length ? firebase.initializeApp(firebaseConfig) : firebase.app();
+export default initializeFirebase;
diff --git a/core/modules/commons/GoogleMapsAutocomplete/index.js b/core/modules/commons/GoogleMapsAutocomplete/index.js
index 02d054757..ba7671385 100644
--- a/core/modules/commons/GoogleMapsAutocomplete/index.js
+++ b/core/modules/commons/GoogleMapsAutocomplete/index.js
@@ -1,16 +1,13 @@
 /* eslint-disable max-len */
 /* eslint-disable react/destructuring-assignment */
-import React, { useState, useEffect } from 'react';
+import CustomTextField from '@common_textfield';
+import { useTranslation } from '@i18n';
 import {
-    GoogleMap,
-    Autocomplete,
-    Marker,
-    useJsApiLoader,
+    Autocomplete, GoogleMap, Marker, useJsApiLoader,
 } from '@react-google-maps/api';
-import { useTranslation } from '@i18n';
-import CustomTextField from '@common_textfield';
+import { encrypt } from '@root/core/helpers/clientEncryption';
 import { capitalizeEachWord } from '@root/core/helpers/text';
-import { encrypt } from '@root/core/helpers/encryption';
+import React, { useEffect, useState } from 'react';
 
 // Set map container size
 const containerStyle = {
diff --git a/core/modules/theme/pages/_app.js b/core/modules/theme/pages/_app.js
index 419d9f5b2..3878fae72 100644
--- a/core/modules/theme/pages/_app.js
+++ b/core/modules/theme/pages/_app.js
@@ -1,7 +1,9 @@
+/* eslint-disable object-curly-newline */
 /* eslint-disable no-underscore-dangle */
 /* eslint-disable class-methods-use-this */
 /* eslint-disable func-names */
 /* eslint-disable radix */
+/* eslint-disable max-len */
 import { custDataNameCookie, features, GTM, modules, sentry } from '@config';
 import { getLastPathWithoutLogin, getLoginInfo } from '@helper_auth';
 import { getLocalStorage, setLocalStorage, setResolver, testLocalStorage } from '@helper_localstorage';
@@ -94,10 +96,9 @@ class MyApp extends App {
         } else {
             isLogin = allcookie.isLogin || 0;
             customerData = allcookie[custDataNameCookie];
-            lastPathNoAuth =
-                req.session && typeof req.session !== 'undefined' && req.session.lastPathNoAuth && typeof req.session.lastPathNoAuth !== 'undefined'
-                    ? req.session.lastPathNoAuth
-                    : '/customer/account';
+            lastPathNoAuth = req.session && typeof req.session !== 'undefined' && req.session.lastPathNoAuth && typeof req.session.lastPathNoAuth !== 'undefined'
+                ? req.session.lastPathNoAuth
+                : '/customer/account';
         }
         isLogin = parseInt(isLogin);
 
@@ -146,6 +147,7 @@ class MyApp extends App {
                 })
                 .then(({ data }) => data)
                 .catch((e) => console.log(e));
+            console.log('frontendtop', frontendOptions);
 
             if (ctx && frontendOptions.response && frontendOptions.response.status && frontendOptions.response.status > 500) {
                 ctx.res.redirect('/maintenance');
@@ -170,7 +172,10 @@ class MyApp extends App {
                     ? await graphRequest(getVesMenu, { alias: storeConfig.pwa.ves_menu_alias })
                     : await graphRequest(getCategories);
             }
+            console.log('frontendtop1', frontendOptions);
+            console.log('privateConfig1', privateConfig);
             frontendOptions = frontendOptions.storeConfig;
+            console.log('frontendtop2', frontendOptions);
             removeDecimalConfig = storeConfig?.pwa?.remove_decimal_price_enable !== null ? storeConfig?.pwa?.remove_decimal_price_enable : false;
         } else if (typeof window !== 'undefined' && !storeConfig) {
             storeConfig = getLocalStorage('pwa_config');
@@ -196,20 +201,20 @@ class MyApp extends App {
                 if (!dataVesMenu) {
                     dataVesMenu = storeConfig.pwa.ves_menu_enable
                         ? await pageProps.apolloClient
-                              .query({
-                                  query: gql`
+                            .query({
+                                query: gql`
                                       ${getVesMenu}
                                   `,
-                                  variables: { alias: storeConfig.pwa.ves_menu_alias },
-                              })
-                              .then(({ data }) => data)
+                                variables: { alias: storeConfig.pwa.ves_menu_alias },
+                            })
+                            .then(({ data }) => data)
                         : await pageProps.apolloClient
-                              .query({
-                                  query: gql`
+                            .query({
+                                query: gql`
                                       ${getCategories}
                                   `,
-                              })
-                              .then(({ data }) => data);
+                            })
+                            .then(({ data }) => data);
                 }
             }
             frontendOptions = await pageProps.apolloClient
@@ -291,30 +296,31 @@ class MyApp extends App {
             Notification.init();
             // handle if have message on focus
             try {
-                const messaging = firebase.messaging();
                 // Handle incoming messages. Called when:
                 // - a message is received while the app has focus
                 // - the user clicks on an app notification created by a service worker
                 //   `messaging.setBackgroundMessageHandler` handler.
-                messaging.onMessage((payload) => {
-                    navigator.serviceWorker.ready.then((registration) => {
-                        // This prevents to show one notification for each tab
-                        setTimeout(() => {
-                            console.log('[firebase-messaging-sw.js] Received foreground message ', payload);
-                            const lastNotification = localStorage.getItem('lastNotification');
-                            const isDifferentContent = payload.data.updated_date !== lastNotification;
-                            if (isDifferentContent) {
-                                localStorage.setItem('lastNotification', payload.data.updated_date + payload.data.title);
-                                registration.showNotification(payload.data.title, {
-                                    body: payload.data.body,
-                                    vibrate: [200, 100, 200, 100, 200, 100, 200],
-                                    icon: payload.data.icons || '',
-                                    image: payload.data.image || '',
-                                    requireInteraction: true,
-                                    data: payload.data,
-                                });
-                            }
-                        }, Math.random() * 1000);
+                firebase().then((firebaseApp) => {
+                    firebaseApp.messaging().onMessage((payload) => {
+                        navigator.serviceWorker.ready.then((registration) => {
+                            // This prevents to show one notification for each tab
+                            setTimeout(() => {
+                                console.log('[firebase-messaging-sw.js] Received foreground message ', payload);
+                                const lastNotification = localStorage.getItem('lastNotification');
+                                const isDifferentContent = payload.data.updated_date !== lastNotification;
+                                if (isDifferentContent) {
+                                    localStorage.setItem('lastNotification', payload.data.updated_date + payload.data.title);
+                                    registration.showNotification(payload.data.title, {
+                                        body: payload.data.body,
+                                        vibrate: [200, 100, 200, 100, 200, 100, 200],
+                                        icon: payload.data.icons || '',
+                                        image: payload.data.image || '',
+                                        requireInteraction: true,
+                                        data: payload.data,
+                                    });
+                                }
+                            }, Math.random() * 1000);
+                        });
                     });
                 });
             } catch (err) {
@@ -373,7 +379,7 @@ class MyApp extends App {
             },
             (err) => {
                 console.log('Service Worker registration failed: ', err);
-            }
+            },
         );
     }
 
diff --git a/package.json b/package.json
index 067355d7d..f031484f3 100644
--- a/package.json
+++ b/package.json
@@ -4,16 +4,16 @@
   "private": true,
   "scripts": {
     "assets:build": "webpack",
-    "local": "cross-env APP_ENV=local NODE_ENV=development ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node server.js",
-    "local:start": "cross-env APP_ENV=local NODE_ENV=production ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node server.js",
-    "dev": "cross-env APP_ENV=dev NODE_ENV=development node --max-http-header-size=16384 server.js",
-    "dev:start": "cross-env APP_ENV=dev NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
-    "stage": "cross-env APP_ENV=stage NODE_ENV=development ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
-    "stage:start": "cross-env APP_ENV=stage NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
-    "prod": "cross-env APP_ENV=prod NODE_ENV=development ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
-    "prod:start": "cross-env APP_ENV=prod NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
+    "local": "cross-env APP_ENV=local NODE_ENV=development node -r dotenv/config server.js",
+    "local:start": "cross-env APP_ENV=local NODE_ENV=production node -r dotenv/config server.js",
+    "dev": "cross-env APP_ENV=dev NODE_ENV=development node --max-http-header-size=16384 -r dotenv/config server.js",
+    "dev:start": "cross-env APP_ENV=dev NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 node --max-http-header-size=16384 -r dotenv/config server.js",
+    "stage": "cross-env APP_ENV=stage NODE_ENV=development ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 -r dotenv/config server.js",
+    "stage:start": "cross-env APP_ENV=stage NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 node --max-http-header-size=16384 -r dotenv/config server.js",
+    "prod": "cross-env APP_ENV=prod NODE_ENV=development node --max-http-header-size=16384 -r dotenv/config server.js",
+    "prod:start": "cross-env APP_ENV=prod NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 node --max-http-header-size=16384 -r dotenv/config server.js",
     "pretest": "./node_modules/.bin/eslint --ignore-path .gitignore . --fix",
-    "start": "cross-env node --max-http-header-size=16384 server.js",
+    "start": "cross-env node --max-http-header-size=16384 -r dotenv/config server.js",
     "generate-certs": "mkdir certs && openssl req -x509 -days 365 -newkey rsa:2048 -nodes -sha256 -keyout certs/privateKey.key -out certs/certificate.crt",
     "build": "concurrently \"yarn assets:build\" \"next build\"",
     "export": "next export",
@@ -48,6 +48,7 @@
     "cross-fetch": "^3.0.6",
     "dayjs": "^1.8.27",
     "disqus-react": "^1.0.11",
+    "dotenv": "^16.0.3",
     "express": "^4.17.1",
     "express-session": "^1.17.1",
     "express-user-agent-blocker": "^2.0.4",
diff --git a/server.js b/server.js
index 5f52204ee..0b8e02467 100644
--- a/server.js
+++ b/server.js
@@ -27,6 +27,7 @@ const generateXml = require('./core/api/rest/xml');
 const captchaValidation = require('./core/api/rest/captcha');
 const firebaseValidation = require('./core/api/rest/firebase-cloud-messaging');
 const geocodingServices = require('./core/api/rest/geocoding');
+const firebaseInit = require('./core/api/rest/firebaseInit');
 
 // paypal
 const getPaypalDetail = require('./core/api/rest/paypal/getDetailTransaction');
@@ -139,7 +140,7 @@ async function renderAndCache(req, res) {
         }
     }`;
 
-    const SESSION_SECRET = fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
+    fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
         method: 'GET',
         headers: {
             Authorization: `Bearer ${getAccessEnv()}`,
@@ -147,22 +148,23 @@ async function renderAndCache(req, res) {
         },
     })
         .then((response) => response.json())
-        .then((responseJson) => responseJson.data.storeConfig.swift_server.session_secret)
+        .then((responseJson) => {
+            server.use(
+                cookieSession({
+                    name: 'qwt-swift',
+                    keys: [responseJson.data.storeConfig.swift_server.session_secret],
+                    maxAge: expiredToken,
+                    // add security options
+                    cookies: {
+                        secure: true,
+                        httpOnly: true,
+                    },
+                }),
+            );
+        })
         .catch((err) => {
             console.log(err);
         });
-    server.use(
-        cookieSession({
-            name: 'qwt-swift',
-            keys: [SESSION_SECRET],
-            maxAge: expiredToken,
-            // add security options
-            cookies: {
-                secure: true,
-                httpOnly: true,
-            },
-        }),
-    );
 
     server.use(json({ limit: '2mb' }));
 
@@ -206,6 +208,9 @@ async function renderAndCache(req, res) {
     // geocoding services
     server.post('/geocoding-services', geocodingServices);
 
+    // firebase init
+    server.post('/firebase-init', firebaseInit);
+
     /**
      * configuration firebase messaging
      *   */
diff --git a/swift.config.js b/swift.config.js
index aba376c8f..cde9479cc 100644
--- a/swift.config.js
+++ b/swift.config.js
@@ -14,8 +14,8 @@ const HOST = {
 
 /* Magento GraphQL Endpoint */
 const graphqlEndpoint = {
-    local: 'https://swift-sprint.testingnow.me/graphql',
-    dev: 'https://swift-sprint.testingnow.me/graphql',
+    local: 'https://upgrade244.testingnow.me/graphql',
+    dev: 'https://upgrade244.testingnow.me/graphql',
     stage: 'https://b2cdemonew.gcp-staging.testingnow.me/graphql',
     prod: 'https://b2cdemo.getswift.asia/graphql',
 };
diff --git a/yarn.lock b/yarn.lock
index e9530ebbb..12a1b8ebf 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -5790,6 +5790,11 @@ dot-prop@^5.2.0:
   dependencies:
     is-obj "^2.0.0"
 
+dotenv@^16.0.3:
+  version "16.0.3"
+  resolved "https://registry.yarnpkg.com/dotenv/-/dotenv-16.0.3.tgz#115aec42bac5053db3c456db30cc243a5a836a07"
+  integrity sha512-7GO6HghkA5fYG9TYnNxi14/7K9f5occMlp3zXAuSxn7CKCxt9xbNWG7yF8hTCSUchlfWSe3uLmlPfigevRItzQ==
+
 duplexer3@^0.1.4:
   version "0.1.4"
   resolved "https://registry.yarnpkg.com/duplexer3/-/duplexer3-0.1.4.tgz#ee01dd1cac0ed3cbc7fdbea37dc0a8f1ce002ce2"

From 9970dcfacdb620aaaabe32c907b8fa9e3fef8099 Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Fri, 11 Nov 2022 14:02:30 +0700
Subject: [PATCH 06/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Refactor private config method

---
 .env                                          |  9 ++-
 core/api/graphql/request/index.js             |  1 -
 .../internalGenerateCustomerTokenCustom.js    |  7 +-
 core/api/rest/encryptInit.js                  | 33 --------
 core/api/rest/firebase-cloud-messaging.js     | 50 +++---------
 core/api/rest/firebaseInit.js                 | 45 -----------
 core/api/rest/paypal/client.js                | 68 ++++++++--------
 core/helpers/clientEncryption.js              |  9 +--
 core/helpers/encryption.js                    | 73 +++++------------
 core/lib/apollo/apolloClient.js               | 23 +++---
 core/lib/firebase/index.js                    | 46 +----------
 core/lib/firebase/notification.js             |  4 -
 .../pages/default/components/payment/view.js  | 15 ++--
 core/modules/commons/Image/index.js           | 11 +--
 .../commons/Loaders/PageProgress/index.js     |  5 +-
 core/modules/commons/Slick/Banner/Thumbor.js  | 15 ++--
 .../components/configurable/index.js          | 11 +--
 .../OptionItem/ConfigurableOption/core.js     | 23 ++----
 .../pages/default/components/index.js         | 13 ++-
 .../header/desktop/components/index.js        |  1 +
 .../theme/components/recentlyViewed/index.js  | 15 ++--
 core/modules/theme/pages/_app.js              | 79 ++++++++-----------
 core/services/graphql/schema/config.js        | 19 -----
 server.js                                     | 53 +++----------
 swift-server.config.js                        | 27 -------
 25 files changed, 189 insertions(+), 466 deletions(-)
 delete mode 100644 core/api/rest/encryptInit.js
 delete mode 100644 core/api/rest/firebaseInit.js
 delete mode 100644 swift-server.config.js

diff --git a/.env b/.env
index 6388ee6e5..804e023c1 100644
--- a/.env
+++ b/.env
@@ -1 +1,8 @@
-ACCESS_KEY="z42nzj61mfsbe5ys0qo2h5vha1icxe5a"
\ No newline at end of file
+ACCESS_KEY="z42nzj61mfsbe5ys0qo2h5vha1icxe5a"
+ENCRYPTION_KEY=TXAjwm8k53PJG9NacLbyZavvQB2qBh43
+ALGORITHM=aes-256-cbc
+FCM_KEY_SERVER=
+FCM_TOPIC=notificationspwa
+SESSION_SECRET=asdasdd1212ads12!!!@**DADxx1
+NEXT_PUBLIC_ENCRYPTION_KEY=TXAjwm8k53PJG9NacLbyZavvQB2qBh43
+NEXT_PUBLIC_ALGORITHM=aes-256-cbc
\ No newline at end of file
diff --git a/core/api/graphql/request/index.js b/core/api/graphql/request/index.js
index daebaed65..c18d75dcc 100644
--- a/core/api/graphql/request/index.js
+++ b/core/api/graphql/request/index.js
@@ -8,7 +8,6 @@ const { getAppEnv, getAccessEnv } = require('../../../helpers/env');
 
 function requestGraph(query, variables = {}, context = {}, config = {}) {
     let token = '';
-    console.log(query.includes('snap_client_key'));
     if (config.token) {
         if (query.includes('snap_client_key')) {
             token = `Bearer ${getAccessEnv()}`;
diff --git a/core/api/graphql/resolver/internalGenerateCustomerTokenCustom.js b/core/api/graphql/resolver/internalGenerateCustomerTokenCustom.js
index f3abe14f0..33fece1f9 100644
--- a/core/api/graphql/resolver/internalGenerateCustomerTokenCustom.js
+++ b/core/api/graphql/resolver/internalGenerateCustomerTokenCustom.js
@@ -7,8 +7,11 @@ const query = `
         $username: String!,
         $password: String!,
     ) {
-        generateCustomerTokenCustom(username: $username, password: $password){
-        token
+        generateCustomerTokenCustom(
+            username: $username,
+            password: $password
+        ) {
+            token
         }
     }
 `;
diff --git a/core/api/rest/encryptInit.js b/core/api/rest/encryptInit.js
deleted file mode 100644
index dda5a3bd8..000000000
--- a/core/api/rest/encryptInit.js
+++ /dev/null
@@ -1,33 +0,0 @@
-const { getAccessEnv } = require('../../helpers/env');
-const { encrypt } = require('../../helpers/clientEncryption');
-
-module.exports = (req, res) => {
-    const { endpoint } = req.body;
-
-    const query = `{
-        storeConfig {
-            swift_server {
-                algorithm
-                encryption_key
-            }
-        }
-    }`;
-
-    fetch(`${endpoint}?query=${encodeURI(query)}`, {
-        method: 'GET',
-        headers: {
-            Authorization: `Bearer ${getAccessEnv()}`,
-            'Content-Type': 'application/json',
-        },
-    })
-        .then((response) => response.json())
-        .then((responseJson) => {
-            res.status(200).json({
-                algorithm: encrypt(responseJson.data.storeConfig.swift_server.algorithm),
-                encryption_key: encrypt(responseJson.data.storeConfig.swift_server.encryption_key),
-            });
-        })
-        .catch((e) => {
-            res.status(500).json(e);
-        });
-};
diff --git a/core/api/rest/firebase-cloud-messaging.js b/core/api/rest/firebase-cloud-messaging.js
index 7bc78d0b8..464e17ed3 100644
--- a/core/api/rest/firebase-cloud-messaging.js
+++ b/core/api/rest/firebase-cloud-messaging.js
@@ -1,50 +1,26 @@
-const { getAppEnv, getAccessEnv } = require('../../helpers/env');
-const { graphqlEndpoint } = require('../../../swift.config');
-
 /* eslint-disable no-unused-vars */
 /* eslint-disable max-len */
 module.exports = (req, res) => {
     const { token } = req.body;
+    const topic = process.env.FCM_TOPIC;
+    const keyserver = `key=${process.env.FCM_KEY_SERVER}`;
     if (req.session.fcm_token !== token) {
-        const query = `{
-            storeConfig {
-                swift_server {
-                    fcm_key_server
-                    fcm_topic
-                }
-            }
-        }`;
-
-        fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
-            method: 'GET',
+        fetch(`https://iid.googleapis.com/iid/v1/${token}/rel/topics/${topic}`, {
+            method: 'post',
             headers: {
-                Authorization: `Bearer ${getAccessEnv()}`,
                 'Content-Type': 'application/json',
+                'Content-Length': 0,
+                Authorization: keyserver,
             },
         })
-            .then((response) => response.json())
-            .then((responseJson) => {
-                const keyserver = `key=${responseJson.data.storeConfig.swift_server.fcm_key_server}`;
-                fetch(`https://iid.googleapis.com/iid/v1/${token}/rel/topics/${responseJson.data.storeConfig.swift_server.fcm_topic}`, {
-                    method: 'post',
-                    headers: {
-                        'Content-Type': 'application/json',
-                        'Content-Length': 0,
-                        Authorization: keyserver,
-                    },
-                })
-                    .then((data) => {
-                        req.session.fcm_token = token;
-                        res.status(200).json({
-                            status: 200,
-                            message: 'success subscribe token',
-                        });
-                    })
-                    .catch((err) => res.status(500).json(err));
+            .then((data) => {
+                req.session.fcm_token = token;
+                res.status(200).json({
+                    status: 200,
+                    message: 'success subscribe token',
+                });
             })
-            .catch((err) => {
-                console.log(err);
-            });
+            .catch((err) => res.status(500).json(err));
     } else {
         res.json({
             status: 200,
diff --git a/core/api/rest/firebaseInit.js b/core/api/rest/firebaseInit.js
deleted file mode 100644
index db35e7edb..000000000
--- a/core/api/rest/firebaseInit.js
+++ /dev/null
@@ -1,45 +0,0 @@
-const { getAccessEnv } = require('../../helpers/env');
-const { encrypt } = require('../../helpers/clientEncryption');
-
-module.exports = async (req, res) => {
-    const { endpoint } = req.body;
-
-    const query = `{
-        storeConfig {
-            firebase_api_key {
-                api_key
-                auth_domain
-                database_url
-                project_id
-                storage_bucket
-                messaging_sender_id
-                app_id
-                measurement_id
-            }
-        }
-    }`;
-
-    await fetch(`${endpoint}?query=${encodeURI(query)}`, {
-        method: 'GET',
-        headers: {
-            Authorization: `Bearer ${getAccessEnv()}`,
-            'Content-Type': 'application/json',
-        },
-    })
-        .then((response) => response.json())
-        .then((responseJson) => {
-            res.status(200).json({
-                apiKey: encrypt(responseJson.data.storeConfig.firebase_api_key.api_key),
-                authDomain: encrypt(responseJson.data.storeConfig.firebase_api_key.auth_domain),
-                databaseURL: encrypt(responseJson.data.storeConfig.firebase_api_key.database_url),
-                projectId: encrypt(responseJson.data.storeConfig.firebase_api_key.project_id),
-                storageBucket: encrypt(responseJson.data.storeConfig.firebase_api_key.storage_bucket),
-                messagingSenderId: encrypt(responseJson.data.storeConfig.firebase_api_key.messaging_sender_id),
-                appId: encrypt(responseJson.data.storeConfig.firebase_api_key.app_id),
-                measurementId: encrypt(responseJson.data.storeConfig.firebase_api_key.measurement_id),
-            });
-        })
-        .catch((e) => {
-            res.status(500).json(e);
-        });
-};
diff --git a/core/api/rest/paypal/client.js b/core/api/rest/paypal/client.js
index 0b08fe6df..8b0a0082a 100644
--- a/core/api/rest/paypal/client.js
+++ b/core/api/rest/paypal/client.js
@@ -1,8 +1,9 @@
-/* eslint-disable no-restricted-syntax */
-/* eslint-disable no-prototype-builtins */
 /* eslint-disable no-restricted-globals */
 /* eslint-disable radix */
+/* eslint-disable no-prototype-builtins */
 /* eslint-disable no-await-in-loop */
+/* eslint-disable no-restricted-syntax */
+
 /**
  *
  * PayPal Node JS SDK dependency
@@ -18,39 +19,40 @@ const { graphqlEndpoint } = require('../../../../swift.config');
  *
  */
 function environment() {
-    const query = `{
-        storeConfig {
-            paypal_key {
-                cancel_url
-                client_id
-                client_secret
-                disable_funding
-                intent
-                key_data
-                key_token
-                path
-                return_url
+    return new Promise((resolve) => {
+        const query = `{
+            storeConfig {
+                paypal_key {
+                    cancel_url
+                    client_id
+                    client_secret
+                    disable_funding
+                    intent
+                    key_data
+                    key_token
+                    path
+                    return_url
+                }
             }
-        }
-    }`;
-
-    fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
-        method: 'GET',
-        headers: {
-            Authorization: `Bearer ${getAccessEnv()}`,
-            'Content-Type': 'application/json',
-        },
-    })
-        .then((response) => response.json())
-        .then((responseJson) => {
-            const clientId = responseJson.data.storeConfig.paypal_key.client_id;
-            const clientSecret = responseJson.data.storeConfig.paypal_key.client_secret;
-
-            return new checkoutNodeJssdk.core.SandboxEnvironment(clientId, clientSecret);
+        }`;
+        fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
+            method: 'GET',
+            headers: {
+                Authorization: `Bearer ${getAccessEnv()}`,
+                'Content-Type': 'application/json',
+            },
         })
-        .catch((err) => {
-            console.log(err);
-        });
+            .then((response) => response.json())
+            .then((responseJson) => {
+                const clientId = responseJson.data.storeConfig.paypal_key.client_id;
+                const clientSecret = responseJson.data.storeConfig.paypal_key.client_secret;
+
+                resolve(new checkoutNodeJssdk.core.SandboxEnvironment(clientId, clientSecret));
+            })
+            .catch((err) => {
+                console.log(err);
+            });
+    });
 }
 
 /**
diff --git a/core/helpers/clientEncryption.js b/core/helpers/clientEncryption.js
index 19980c839..dd16a7b47 100644
--- a/core/helpers/clientEncryption.js
+++ b/core/helpers/clientEncryption.js
@@ -1,19 +1,16 @@
 const crypto = require('crypto');
 
-const key = 'TXAjwm8k53PJG9NacLbyZavvQB2qBh43'; // TXAjwm8k53PJG9NacLbyZavvQB2qBh43 || asdasdd1212ads12!!!@**DADxx1
-const algorithm = 'aes-256-cbc';
-
-const iv = key.substr(0, 16);
+const iv = process.env.NEXT_PUBLIC_ENCRYPTION_KEY.substr(0, 16);
 
 const encrypt = (text) => {
-    const cipher = crypto.createCipheriv(algorithm, key, iv);
+    const cipher = crypto.createCipheriv(process.env.NEXT_PUBLIC_ALGORITHM, process.env.NEXT_PUBLIC_ENCRYPTION_KEY, iv);
     let crypted = cipher.update(text, 'utf8', 'base64');
     crypted += cipher.final('base64');
     return crypted;
 };
 
 const decrypt = (text) => {
-    const decipher = crypto.createDecipheriv(algorithm, key, iv);
+    const decipher = crypto.createDecipheriv(process.env.NEXT_PUBLIC_ALGORITHM, process.env.NEXT_PUBLIC_ENCRYPTION_KEY, iv);
     let dec = decipher.update(text, 'base64', 'utf8');
     dec += decipher.final('utf8');
     return dec;
diff --git a/core/helpers/encryption.js b/core/helpers/encryption.js
index c58e9c4b4..2304e4528 100644
--- a/core/helpers/encryption.js
+++ b/core/helpers/encryption.js
@@ -1,64 +1,27 @@
 const crypto = require('crypto');
-const { graphqlEndpoint } = require('../../swift.config');
-const { getAppEnv, getAccessEnv } = require('./env');
-
-const query = `{
-    storeConfig {
-        swift_server {
-            algorithm
-            encryption_key
-        }
-    }
-}`;
 
 const encrypt = (text) => {
-    fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
-        method: 'GET',
-        headers: {
-            'Content-Type': 'application/json',
-            Authorization: `Bearer ${getAccessEnv()}`,
-        },
-    })
-        .then((response) => response.json())
-        .then((responseJson) => {
-            const iv = responseJson.data.storeConfig.swift_server.encryption_key.substr(0, 16);
-            const cipher = crypto.createCipheriv(
-                responseJson.data.storeConfig.swift_server.algorithm,
-                responseJson.data.storeConfig.swift_server.encryption_key,
-                iv,
-            );
-            let crypted = cipher.update(text, 'utf8', 'base64');
-            crypted += cipher.final('base64');
-            return crypted;
-        })
-        .catch((err) => {
-            console.log(err);
-        });
+    const iv = process.env.ENCRYPTION_KEY.substr(0, 16);
+    const cipher = crypto.createCipheriv(
+        process.env.ALGORITHM,
+        process.env.ENCRYPTION_KEY,
+        iv,
+    );
+    let crypted = cipher.update(text, 'utf8', 'base64');
+    crypted += cipher.final('base64');
+    return crypted;
 };
 
 const decrypt = (text) => {
-    fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
-        method: 'GET',
-        headers: {
-            'Content-Type': 'application/json',
-            Authorization: `Bearer ${getAccessEnv()}`,
-        },
-    })
-        .then((response) => response.json())
-        .then((responseJson) => {
-            const iv = responseJson.data.storeConfig.swift_server.encryption_key.substr(0, 16);
-            const decipher = crypto.createDecipheriv(
-                responseJson.data.storeConfig.swift_server.algorithm,
-                responseJson.data.storeConfig.swift_server.encryption_key,
-                iv,
-            );
-            let dec = decipher.update(text, 'base64', 'utf8');
-            dec += decipher.final('utf8');
-            return dec;
-        })
-        .catch((err) => {
-            console.log(err);
-        });
+    const iv = process.env.ENCRYPTION_KEY.substr(0, 16);
+    const decipher = crypto.createDecipheriv(
+        process.env.ALGORITHM,
+        process.env.ENCRYPTION_KEY,
+        iv,
+    );
+    let dec = decipher.update(text, 'base64', 'utf8');
+    dec += decipher.final('utf8');
+    return dec;
 };
 
 module.exports = {
diff --git a/core/lib/apollo/apolloClient.js b/core/lib/apollo/apolloClient.js
index ecb5c6ae5..9b7bfbfd1 100644
--- a/core/lib/apollo/apolloClient.js
+++ b/core/lib/apollo/apolloClient.js
@@ -1,19 +1,19 @@
 /* eslint-disable import/no-extraneous-dependencies */
 /* eslint-disable no-unused-vars */
 import {
-    ApolloClient, HttpLink, InMemoryCache, ApolloLink, from,
+    ApolloClient, ApolloLink, from, HttpLink, InMemoryCache,
 } from '@apollo/client';
-import { RetryLink } from 'apollo-link-retry';
-import fetch from 'isomorphic-unfetch';
+import { getAppEnv } from '@helpers/env';
+import { removeIsLoginFlagging } from '@helper_auth';
+import { removeCartId } from '@helper_cartid';
+import { removeCookies } from '@root/core/helpers/cookies';
 import { graphqlEndpoint, HOST, storeCode } from '@root/swift.config.js';
 import { IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';
 import { onError } from 'apollo-link-error';
-import { removeCartId } from '@helper_cartid';
-import { removeIsLoginFlagging } from '@helper_auth';
-import { getAppEnv } from '@helpers/env';
+import { RetryLink } from 'apollo-link-retry';
 import firebase from 'firebase/app';
+import fetch from 'isomorphic-unfetch';
 import cookies from 'js-cookie';
-import { removeCookies } from '@root/core/helpers/cookies';
 
 const fragmentMatcher = new IntrospectionFragmentMatcher({
     introspectionQueryResultData: {
@@ -42,13 +42,8 @@ const logoutLink = onError((err) => {
         firebase
             .auth()
             .signOut()
-            .then(() => {
-                // Sign-out successful.
-            })
-            .catch((error) => {
-                // An error happened.
-                // console.log(error);
-            });
+            .then(() => { })
+            .catch(() => { });
         // reference https://stackoverflow.com/questions/10339567/javascript-clear-cache-on-redirect
         window.location.href = `/customer/account/login?n=${new Date().getTime()}`;
     }
diff --git a/core/lib/firebase/index.js b/core/lib/firebase/index.js
index 3ed10edad..292fcd61c 100644
--- a/core/lib/firebase/index.js
+++ b/core/lib/firebase/index.js
@@ -1,48 +1,10 @@
-import { graphqlEndpoint } from '@config';
-import { decrypt } from '@helpers/clientEncryption';
-import { getAccessEnv, getAppEnv } from '@helpers/env';
+import { features } from '@config';
 import firebase from 'firebase/app';
 
 require('firebase/auth');
 require('firebase/messaging');
 
-const initializeFirebase = async () => {
-    if (!firebase.apps.length) {
-        const request = await fetch('/firebase-init', {
-            method: 'POST',
-            headers: {
-                Authorization: `Bearer ${getAccessEnv()}`,
-                'Content-Type': 'application/json',
-            },
-            body: JSON.stringify({
-                endpoint: graphqlEndpoint[getAppEnv()],
-            }),
-        });
-        const response = await request.json();
-        const firebaseApp = firebase.initializeApp({
-            apiKey: decrypt(response.apiKey),
-            authDomain: decrypt(response.authDomain),
-            databaseURL: decrypt(response.databaseURL),
-            projectId: decrypt(response.projectId),
-            storageBucket: decrypt(response.storageBucket),
-            messagingSenderId: decrypt(response.messagingSenderId),
-            appId: decrypt(response.appId),
-            measurementId: decrypt(response.measurementId),
-        });
-        // .then((res) => res.json()).then((responseJson) => firebase.initializeApp({
-        //     apiKey: decrypt(responseJson.apiKey),
-        //     authDomain: decrypt(responseJson.authDomain),
-        //     databaseURL: decrypt(responseJson.databaseURL),
-        //     projectId: decrypt(responseJson.projectId),
-        //     storageBucket: decrypt(responseJson.storageBucket),
-        //     messagingSenderId: decrypt(responseJson.messagingSenderId),
-        //     appId: decrypt(responseJson.appId),
-        //     measurementId: decrypt(responseJson.measurementId),
-        // }))
-        //     .catch((err) => console.log(err));
-        return firebaseApp;
-    }
-    return firebase.app();
-};
+// For Firebase JS SDK v7.20.0 and later, measurementId is optional
+const firebaseConfig = features.firebase.config;
 
-export default initializeFirebase;
+export default !firebase.apps.length ? firebase.initializeApp(firebaseConfig) : firebase.app();
diff --git a/core/lib/firebase/notification.js b/core/lib/firebase/notification.js
index 263c54482..bff4545c2 100644
--- a/core/lib/firebase/notification.js
+++ b/core/lib/firebase/notification.js
@@ -23,7 +23,6 @@ const notification = {
             .then((currentToken) => {
                 if (currentToken) {
                     notification.sendTokenToServer(currentToken);
-                    // updateUIForPushEnabled(currentToken)
                 } else {
                 }
             })
@@ -46,9 +45,6 @@ const notification = {
     init() {
         try {
             const messaging = firebase.messaging();
-            // messaging.usePublicVapidKey(
-            //   "BNLpFKMYBkoD5UoMz4YqVWVQkcSWJ3kxJQkhlAPclwZiZ0gLKYSsjolscS_7r6SX_qoNviXmEGTLweNuEzGNSng"
-            // )
             messaging.usePublicVapidKey(features.firebase.pushNotification.config.pairKey);
 
             // request notification
diff --git a/core/modules/checkout/pages/default/components/payment/view.js b/core/modules/checkout/pages/default/components/payment/view.js
index f0bc00a3e..afbc6be25 100644
--- a/core/modules/checkout/pages/default/components/payment/view.js
+++ b/core/modules/checkout/pages/default/components/payment/view.js
@@ -1,23 +1,23 @@
 /* eslint-disable no-plusplus */
 /* eslint-disable no-shadow */
-import { withStyles } from '@material-ui/core/styles';
 import MuiExpansionPanel from '@material-ui/core/Accordion';
-import MuiExpansionPanelSummary from '@material-ui/core/AccordionSummary';
 import MuiExpansionPanelDetails from '@material-ui/core/AccordionDetails';
+import MuiExpansionPanelSummary from '@material-ui/core/AccordionSummary';
 import Grid from '@material-ui/core/Grid';
+import { withStyles } from '@material-ui/core/styles';
 
-import Typography from '@common_typography';
 import Button from '@common_button';
-import Arrow from '@material-ui/icons/ArrowDropDown';
 import Radio from '@common_forms/Radio';
-import Skeleton from '@material-ui/lab/Skeleton';
+import Typography from '@common_typography';
 import commonConfig from '@config';
 import FieldPoint from '@core_modules/checkout/components/fieldcode';
 import RadioItem from '@core_modules/checkout/components/radioitem';
 import ModalHowtoPay from '@core_modules/checkout/pages/default/components/ModalHowtoPay';
-import useStyles from '@core_modules/checkout/pages/default/components/style';
-import { PayPalScriptProvider, PayPalButtons } from '@paypal/react-paypal-js';
 import TravelokaPayForm from '@core_modules/checkout/pages/default/components/payment/components/TravelokaPayForm';
+import useStyles from '@core_modules/checkout/pages/default/components/style';
+import Arrow from '@material-ui/icons/ArrowDropDown';
+import Skeleton from '@material-ui/lab/Skeleton';
+import { PayPalButtons, PayPalScriptProvider } from '@paypal/react-paypal-js';
 import { ExpanDetailStyle, ExpanPanelStyle, ExpanSummaryStyle } from './style';
 
 const ExpansionPanel = withStyles(ExpanPanelStyle)(MuiExpansionPanel);
@@ -175,7 +175,6 @@ const PaymentView = (props) => {
                 }
             }
         }
-        // console.log('storeConfig', payment_travelokapay_bin_whitelist, payment_travelokapay_public_key, payment_travelokapay_user_id);
         content = (
             <div>
                 <Typography variant="p">{t('checkout:paymentSubtitle')}</Typography>
diff --git a/core/modules/commons/Image/index.js b/core/modules/commons/Image/index.js
index 870d2de73..8087f6901 100644
--- a/core/modules/commons/Image/index.js
+++ b/core/modules/commons/Image/index.js
@@ -1,18 +1,19 @@
 /* eslint-disable no-param-reassign */
 /* eslint-disable func-names */
 /* eslint-disable no-unused-vars */
-import React, { useEffect, useState } from 'react';
 import { generateThumborUrl, getImageFallbackUrl } from '@helpers/image';
+import { getLocalStorage } from '@helpers/localstorage';
+import React, { useEffect, useState } from 'react';
 import LazyImage from './LazyImage';
 
 const CustomImage = ({
     src, width = 500, height = 500, magezon,
     classContainer = '', className = '', alt = 'Image', quality = 100, style = {}, lazy = false, ...other
 }) => {
-    const storeConfig = JSON.parse(localStorage.getItem('storeConfig'));
-    const enable = storeConfig.pwa.thumbor_enable;
-    const useHttpsOrHttp = storeConfig.pwa.thumbor_https_http;
-    const url = storeConfig.pwa.thumbor_url;
+    const storeConfig = getLocalStorage('storeConfig') && getLocalStorage('storeConfig');
+    const enable = storeConfig && storeConfig.pwa.thumbor_enable;
+    const useHttpsOrHttp = storeConfig && storeConfig.pwa.thumbor_https_http;
+    const url = storeConfig && storeConfig.pwa.thumbor_url;
     const imageUrl = generateThumborUrl(src, width, height, enable, useHttpsOrHttp, url);
     const [imgSource, setImgSource] = useState(imageUrl);
 
diff --git a/core/modules/commons/Loaders/PageProgress/index.js b/core/modules/commons/Loaders/PageProgress/index.js
index a4a2a8d7d..09574b95b 100644
--- a/core/modules/commons/Loaders/PageProgress/index.js
+++ b/core/modules/commons/Loaders/PageProgress/index.js
@@ -1,7 +1,7 @@
-import React, { useEffect, useState } from 'react';
-import Router from 'next/router';
 import LinearProgress from '@material-ui/core/LinearProgress';
 import makeStyles from '@material-ui/core/styles/makeStyles';
+import Router from 'next/router';
+import React, { useEffect, useState } from 'react';
 
 const useStyles = makeStyles(() => ({
     linearProgressWrapper: {
@@ -71,7 +71,6 @@ const PageProgressLoader = () => {
         Router.events.on('routeChangeStart', handleRouteChangeStart);
         Router.events.on('routeChangeComplete', handleRouteChangeComplete);
         Router.events.on('RouteChangeError', handleRouteChangeError);
-        // console.log(progress);
 
         return () => {
             clearInterval(timer);
diff --git a/core/modules/commons/Slick/Banner/Thumbor.js b/core/modules/commons/Slick/Banner/Thumbor.js
index de56fd63a..74cf39d65 100644
--- a/core/modules/commons/Slick/Banner/Thumbor.js
+++ b/core/modules/commons/Slick/Banner/Thumbor.js
@@ -1,7 +1,8 @@
-import classNames from 'classnames';
-import { BREAKPOINTS } from '@theme_vars';
-import { generateThumborUrl, getImageFallbackUrl } from '@helpers/image';
 import useStyles from '@common_slick/Banner/style';
+import { generateThumborUrl, getImageFallbackUrl } from '@helpers/image';
+import { getLocalStorage } from '@helpers/localstorage';
+import { BREAKPOINTS } from '@theme_vars';
+import classNames from 'classnames';
 import { useEffect, useState } from 'react';
 
 const BannerThumbnail = (props) => {
@@ -19,10 +20,10 @@ const BannerThumbnail = (props) => {
     if (typeof heightMobile === 'string') heightMobile = parseInt(heightMobile, 0);
 
     const styles = useStyles();
-    const storeConfig = JSON.parse(localStorage.getItem('storeConfig'));
-    const enable = storeConfig.pwa.thumbor_enable;
-    const useHttpsOrHttp = storeConfig.pwa.thumbor_https_http;
-    const url = storeConfig.pwa.thumbor_url;
+    const storeConfig = getLocalStorage('storeConfig') ? getLocalStorage('storeConfig') : null;
+    const enable = storeConfig && storeConfig.pwa.thumbor_enable;
+    const useHttpsOrHttp = storeConfig && storeConfig.pwa.thumbor_https_http;
+    const url = storeConfig && storeConfig.pwa.thumbor_url;
     const imageUrl = generateThumborUrl(src, width, height, enable, useHttpsOrHttp, url);
     const mobileImageUrl = srcMobile ? generateThumborUrl(srcMobile, widthMobile, heightMobile, enable, useHttpsOrHttp, url) : null;
     const placeholderImage = '/assets/img/placeholder.png';
diff --git a/core/modules/product/pages/default/components/OptionItem/components/configurable/index.js b/core/modules/product/pages/default/components/OptionItem/components/configurable/index.js
index b33c318aa..37db6996e 100644
--- a/core/modules/product/pages/default/components/OptionItem/components/configurable/index.js
+++ b/core/modules/product/pages/default/components/OptionItem/components/configurable/index.js
@@ -1,16 +1,14 @@
 /* eslint-disable no-nested-ternary */
-import React from 'react';
 import { useApolloClient } from '@apollo/client';
-import ProductByVariant, { generateValue, generateAvailableCombination, handleSelected } from '@helper_productbyvariant';
 import { getLoginInfo } from '@helper_auth';
 import { getCartId, setCartId } from '@helper_cartid';
-import TagManager from 'react-gtm-module';
+import ProductByVariant, { generateAvailableCombination, generateValue, handleSelected } from '@helper_productbyvariant';
 import { localTotalCart } from '@services/graphql/schema/local';
+import React from 'react';
+import TagManager from 'react-gtm-module';
 import {
     addConfigProductsToCart,
-    getConfigurableProduct,
-    getGuestCartId as queryGetGuestCartId,
-    getCustomerCartId,
+    getConfigurableProduct, getCustomerCartId, getGuestCartId as queryGetGuestCartId,
 } from '../../../../../../services/graphql';
 
 const OptionsItemConfig = (props) => {
@@ -50,7 +48,6 @@ const OptionsItemConfig = (props) => {
         setSelectConfigurable({
             ...selectedOption,
         });
-        // console.log(configProduct.data.products.items[0].variants);
         const product = await ProductByVariant(selectedOption, configProduct.data.products.items[0].variants);
         if (product && JSON.stringify(product) !== '{}') {
             setSelectedProduct({ ...product });
diff --git a/core/modules/product/plugins/OptionItem/ConfigurableOption/core.js b/core/modules/product/plugins/OptionItem/ConfigurableOption/core.js
index d924580a0..502bcf184 100644
--- a/core/modules/product/plugins/OptionItem/ConfigurableOption/core.js
+++ b/core/modules/product/plugins/OptionItem/ConfigurableOption/core.js
@@ -1,18 +1,15 @@
 /* eslint-disable no-underscore-dangle */
 /* eslint-disable no-nested-ternary */
-import React from 'react';
-import ProductByVariant, { generateValue, generateAvailableCombination, handleSelected } from '@helper_productbyvariant';
-import { getLoginInfo } from '@helper_auth';
-import { getCartId, setCartId } from '@helper_cartid';
-import TagManager from 'react-gtm-module';
 import { modules } from '@config';
-import Router from 'next/router';
 import {
-    getConfigurableProduct,
-    getGuestCartId as queryGetGuestCartId,
-    getCustomerCartId,
-    addConfigurableProductsToCart,
+    addConfigurableProductsToCart, getConfigurableProduct, getCustomerCartId, getGuestCartId as queryGetGuestCartId,
 } from '@core_modules/product/services/graphql';
+import { getLoginInfo } from '@helper_auth';
+import { getCartId, setCartId } from '@helper_cartid';
+import ProductByVariant, { generateAvailableCombination, generateValue, handleSelected } from '@helper_productbyvariant';
+import Router from 'next/router';
+import React from 'react';
+import TagManager from 'react-gtm-module';
 
 const OptionsItemConfig = (props) => {
     const {
@@ -68,9 +65,7 @@ const OptionsItemConfig = (props) => {
         setSelectConfigurable({
             ...selectedOption,
         });
-        // console.log(configProduct.data.products.items[0].variants);
         const product = await ProductByVariant(selectedOption, configProduct.data.products.items[0].variants);
-        // console.log('product', product);
         if (product && JSON.stringify(product) !== '{}') {
             setSelectedProduct({ ...product });
             handleSelecteProduct({ ...product });
@@ -389,10 +384,6 @@ const OptionsItemConfig = (props) => {
         }
     }, [selectConfigurable]);
 
-    // console.log('options', options);
-    // console.log('combination', combination);
-    // console.log('selectConfigurable', selectConfigurable);
-
     return (
         <View
             options={options}
diff --git a/core/modules/productcompare/pages/default/components/index.js b/core/modules/productcompare/pages/default/components/index.js
index 0dd388d7d..b4661a463 100644
--- a/core/modules/productcompare/pages/default/components/index.js
+++ b/core/modules/productcompare/pages/default/components/index.js
@@ -1,18 +1,18 @@
 /* eslint-disable max-len */
-import React from 'react';
+import Typography from '@common_typography';
+import ConfirmationDelete from '@core_modules/cart/pages/default/components/confirmDelete';
+import Empty from '@core_modules/productcompare/pages/default/components/empty';
 import useStyles from '@core_modules/productcompare/pages/default/components/style';
 import Table from '@material-ui/core/Table';
 import TableBody from '@material-ui/core/TableBody';
 import TableCell from '@material-ui/core/TableCell';
+import TableContainer from '@material-ui/core/TableContainer';
 import TableHead from '@material-ui/core/TableHead';
 import TableRow from '@material-ui/core/TableRow';
-import TableContainer from '@material-ui/core/TableContainer';
-import ProductItem from '@plugin_productitem';
-import ConfirmationDelete from '@core_modules/cart/pages/default/components/confirmDelete';
-import Typography from '@common_typography';
 import ClearIcon from '@material-ui/icons/Clear';
-import Empty from '@core_modules/productcompare/pages/default/components/empty';
+import ProductItem from '@plugin_productitem';
 import classNames from 'classnames';
+import React from 'react';
 
 const Content = (props) => {
     const styles = useStyles();
@@ -45,7 +45,6 @@ const Content = (props) => {
     };
 
     if (compareList.compareList.items.length === 0) {
-        console.log('hereee 222', compareList);
         return <Empty t={t} />;
     }
 
diff --git a/core/modules/theme/components/header/desktop/components/index.js b/core/modules/theme/components/header/desktop/components/index.js
index f2cd18275..96211da4e 100644
--- a/core/modules/theme/components/header/desktop/components/index.js
+++ b/core/modules/theme/components/header/desktop/components/index.js
@@ -24,6 +24,7 @@ const ViewTopNavigation = (props) => {
             return <NavbarV4 {...props} />;
         }
     }
+    return null;
 };
 
 export default ViewTopNavigation;
diff --git a/core/modules/theme/components/recentlyViewed/index.js b/core/modules/theme/components/recentlyViewed/index.js
index 5e89dd40e..eb433d1df 100644
--- a/core/modules/theme/components/recentlyViewed/index.js
+++ b/core/modules/theme/components/recentlyViewed/index.js
@@ -1,13 +1,13 @@
-import React from 'react';
-import { useTranslation } from '@i18n';
 import Typography from '@common_typography';
-import SwipeableDrawer from '@material-ui/core/SwipeableDrawer';
-import { getLocalStorage } from '@helper_localstorage';
+import ButtonCompare from '@core_modules/theme/components/recentlyViewed/buttonCompare';
 import ProductView from '@core_modules/theme/components/recentlyViewed/productView';
-import { breakPointsUp } from '@helper_theme';
-import { getRecentlyProduct } from '@core_modules/theme/services/graphql';
 import useStyles from '@core_modules/theme/components/recentlyViewed/style';
-import ButtonCompare from '@core_modules/theme/components/recentlyViewed/buttonCompare';
+import { getRecentlyProduct } from '@core_modules/theme/services/graphql';
+import { getLocalStorage } from '@helper_localstorage';
+import { breakPointsUp } from '@helper_theme';
+import { useTranslation } from '@i18n';
+import SwipeableDrawer from '@material-ui/core/SwipeableDrawer';
+import React from 'react';
 
 const RecentlyViewed = (props) => {
     const styles = useStyles();
@@ -20,7 +20,6 @@ const RecentlyViewed = (props) => {
     if (typeof window !== 'undefined') {
         viewedProduct = getLocalStorage('recently_viewed_product_pwa');
     }
-    // console.log(viewedProduct);
     const toggleDrawer = (open) => (event) => {
         if (event && event.type === 'keydown' && (event.key === 'Tab' || event.key === 'Shift')) {
             return;
diff --git a/core/modules/theme/pages/_app.js b/core/modules/theme/pages/_app.js
index 3878fae72..cbaef32bb 100644
--- a/core/modules/theme/pages/_app.js
+++ b/core/modules/theme/pages/_app.js
@@ -1,3 +1,4 @@
+/* eslint-disable comma-dangle */
 /* eslint-disable object-curly-newline */
 /* eslint-disable no-underscore-dangle */
 /* eslint-disable class-methods-use-this */
@@ -18,7 +19,7 @@ import {
     getCategories,
     getSensitiveConfig as PrivateConfigSchema,
     getVesMenu,
-    storeConfig as ConfigSchema,
+    storeConfig as ConfigSchema
 } from '@services/graphql/schema/config';
 import theme from '@theme_theme';
 import Cookie from 'js-cookie';
@@ -139,19 +140,9 @@ class MyApp extends App {
                     `,
                 })
                 .then(({ data }) => data);
-            privateConfig = await pageProps.apolloClient
-                .query({
-                    query: gql`
-                        ${FrontendSchema}
-                    `,
-                })
-                .then(({ data }) => data)
-                .catch((e) => console.log(e));
-            console.log('frontendtop', frontendOptions);
-
-            if (ctx && frontendOptions.response && frontendOptions.response.status && frontendOptions.response.status > 500) {
+            if (ctx && frontendOptions && frontendOptions.response && frontendOptions.response.status && frontendOptions.response.status > 500) {
                 ctx.res.redirect('/maintenance');
-            } else if (ctx && privateConfig.response && privateConfig.response.status && privateConfig.response.status > 500) {
+            } else if (ctx && privateConfig && privateConfig.response && privateConfig.response.status && privateConfig.response.status > 500) {
                 ctx.res.redirect('/maintenance');
             }
         }
@@ -172,10 +163,7 @@ class MyApp extends App {
                     ? await graphRequest(getVesMenu, { alias: storeConfig.pwa.ves_menu_alias })
                     : await graphRequest(getCategories);
             }
-            console.log('frontendtop1', frontendOptions);
-            console.log('privateConfig1', privateConfig);
             frontendOptions = frontendOptions.storeConfig;
-            console.log('frontendtop2', frontendOptions);
             removeDecimalConfig = storeConfig?.pwa?.remove_decimal_price_enable !== null ? storeConfig?.pwa?.remove_decimal_price_enable : false;
         } else if (typeof window !== 'undefined' && !storeConfig) {
             storeConfig = getLocalStorage('pwa_config');
@@ -224,16 +212,16 @@ class MyApp extends App {
                     `,
                 })
                 .then(({ data }) => data);
-            privateConfig = await pageProps.apolloClient
-                .query({
-                    query: gql`
-                        ${PrivateConfigSchema}
-                    `,
-                })
-                .then(({ data }) => data)
-                .catch((e) => console.log(e));
+            // privateConfig = await pageProps.apolloClient
+            //     .query({
+            //         query: gql`
+            //             ${PrivateConfigSchema}
+            //         `,
+            //     })
+            //     .then(({ data }) => data)
+            //     .catch((e) => console.log(e));
             frontendOptions = frontendOptions.storeConfig;
-            privateConfig = privateConfig.storeConfig;
+            // privateConfig = privateConfig.storeConfig;
             removeDecimalConfig = storeConfig?.pwa?.remove_decimal_price_enable !== null ? storeConfig?.pwa?.remove_decimal_price_enable : false;
         }
 
@@ -296,31 +284,30 @@ class MyApp extends App {
             Notification.init();
             // handle if have message on focus
             try {
+                const messaging = firebase.messaging();
                 // Handle incoming messages. Called when:
                 // - a message is received while the app has focus
                 // - the user clicks on an app notification created by a service worker
                 //   `messaging.setBackgroundMessageHandler` handler.
-                firebase().then((firebaseApp) => {
-                    firebaseApp.messaging().onMessage((payload) => {
-                        navigator.serviceWorker.ready.then((registration) => {
-                            // This prevents to show one notification for each tab
-                            setTimeout(() => {
-                                console.log('[firebase-messaging-sw.js] Received foreground message ', payload);
-                                const lastNotification = localStorage.getItem('lastNotification');
-                                const isDifferentContent = payload.data.updated_date !== lastNotification;
-                                if (isDifferentContent) {
-                                    localStorage.setItem('lastNotification', payload.data.updated_date + payload.data.title);
-                                    registration.showNotification(payload.data.title, {
-                                        body: payload.data.body,
-                                        vibrate: [200, 100, 200, 100, 200, 100, 200],
-                                        icon: payload.data.icons || '',
-                                        image: payload.data.image || '',
-                                        requireInteraction: true,
-                                        data: payload.data,
-                                    });
-                                }
-                            }, Math.random() * 1000);
-                        });
+                messaging.onMessage((payload) => {
+                    navigator.serviceWorker.ready.then((registration) => {
+                        // This prevents to show one notification for each tab
+                        setTimeout(() => {
+                            console.log('[firebase-messaging-sw.js] Received foreground message ', payload);
+                            const lastNotification = localStorage.getItem('lastNotification');
+                            const isDifferentContent = payload.data.updated_date !== lastNotification;
+                            if (isDifferentContent) {
+                                localStorage.setItem('lastNotification', payload.data.updated_date + payload.data.title);
+                                registration.showNotification(payload.data.title, {
+                                    body: payload.data.body,
+                                    vibrate: [200, 100, 200, 100, 200, 100, 200],
+                                    icon: payload.data.icons || '',
+                                    image: payload.data.image || '',
+                                    requireInteraction: true,
+                                    data: payload.data,
+                                });
+                            }
+                        }, Math.random() * 1000);
                     });
                 });
             } catch (err) {
diff --git a/core/services/graphql/schema/config.js b/core/services/graphql/schema/config.js
index aaab29a90..de71b7edd 100644
--- a/core/services/graphql/schema/config.js
+++ b/core/services/graphql/schema/config.js
@@ -348,18 +348,6 @@ export const getSensitiveConfig = `
     payment_travelokapay_public_key
     payment_travelokapay_bin_whitelist
     snap_client_key
-    firebase_api_key {
-      api_key
-      app_id
-      auth_domain
-      database_url
-      measurement_id
-      messaging_sender_id
-      pair_key
-      project_id
-      push_notification_enable
-      storage_bucket
-    }
     paypal_key {
       cancel_url
       client_id
@@ -371,13 +359,6 @@ export const getSensitiveConfig = `
       path
       return_url
     }
-    swift_server {
-      algorithm
-      encryption_key
-      fcm_key_server
-      fcm_topic
-      session_secret
-    }
   }
 }`;
 
diff --git a/server.js b/server.js
index 0b8e02467..d49dedfa3 100644
--- a/server.js
+++ b/server.js
@@ -20,14 +20,12 @@ const app = next({ dev: process.env.NODE_ENV !== 'production' });
 const handle = app.getRequestHandler();
 
 const {
-    expiredToken, nossrCache, features, assetsVersion, graphqlEndpoint,
+    expiredToken, nossrCache, features, assetsVersion,
 } = require('./swift.config');
-const { getAppEnv, getAccessEnv } = require('./core/helpers/env');
 const generateXml = require('./core/api/rest/xml');
 const captchaValidation = require('./core/api/rest/captcha');
 const firebaseValidation = require('./core/api/rest/firebase-cloud-messaging');
 const geocodingServices = require('./core/api/rest/geocoding');
-const firebaseInit = require('./core/api/rest/firebaseInit');
 
 // paypal
 const getPaypalDetail = require('./core/api/rest/paypal/getDetailTransaction');
@@ -65,7 +63,6 @@ async function renderAndCache(req, res) {
     }
 
     try {
-        // console.log(`key ${key} not found, rendering`);
         // If not let's render the page into HTML
         const html = await app.renderToHTML(req, res, req.path, req.query);
 
@@ -132,39 +129,18 @@ async function renderAndCache(req, res) {
     await nextI18next.initPromise;
     // server.use(nextI18NextMiddleware(nextI18next));
 
-    const query = `{
-        storeConfig {
-            swift_server {
-                session_secret
-            }
-        }
-    }`;
-
-    fetch(`${graphqlEndpoint[getAppEnv()]}?query=${encodeURI(query)}`, {
-        method: 'GET',
-        headers: {
-            Authorization: `Bearer ${getAccessEnv()}`,
-            'Content-Type': 'application/json',
-        },
-    })
-        .then((response) => response.json())
-        .then((responseJson) => {
-            server.use(
-                cookieSession({
-                    name: 'qwt-swift',
-                    keys: [responseJson.data.storeConfig.swift_server.session_secret],
-                    maxAge: expiredToken,
-                    // add security options
-                    cookies: {
-                        secure: true,
-                        httpOnly: true,
-                    },
-                }),
-            );
-        })
-        .catch((err) => {
-            console.log(err);
-        });
+    server.use(
+        cookieSession({
+            name: 'qwt-swift',
+            keys: [process.env.SESSION_SECRET],
+            maxAge: expiredToken,
+            // add security options
+            cookies: {
+                secure: true,
+                httpOnly: true,
+            },
+        }),
+    );
 
     server.use(json({ limit: '2mb' }));
 
@@ -208,9 +184,6 @@ async function renderAndCache(req, res) {
     // geocoding services
     server.post('/geocoding-services', geocodingServices);
 
-    // firebase init
-    server.post('/firebase-init', firebaseInit);
-
     /**
      * configuration firebase messaging
      *   */
diff --git a/swift-server.config.js b/swift-server.config.js
deleted file mode 100644
index cf5aa8579..000000000
--- a/swift-server.config.js
+++ /dev/null
@@ -1,27 +0,0 @@
-/* eslint-disable max-len */
-/* --------------------------------------- */
-/* Server Side Configuration
-/* --------------------------------------- */
-// put all sensitive configuration that is used in server side only here
-// this way to avoid sensitive values such as ecnryption key to be included in js bundling and can be exposed in client side.
-
-/* Encryption */
-const encryption = {
-    key: 'TXAjwm8k53PJG9NacLbyZavvQB2qBh43',
-    algorithm: 'aes-256-cbc',
-};
-
-/* key server fcm */
-const fcm = {
-    topic: 'notificationspwa',
-    FCM_KEY_SERVER: '', // sample : AAAA_Ene7EY:APA91bHxUfEgv4zU6SIFWAQgt80FtYQVwHhF8QDetJChYMt1BW76Hti036Jplesa-JTqHZlu5UM5gM-f_1DEpa_POjqBE_nqInn7zGrfcgSPDHxOwMGeB2rpe_mO1k6KUoCFgeD9sG1i
-};
-
-/* Cookie */
-const SESSION_SECRET = 'asdasdd1212ads12!!!@**DADxx1';
-
-module.exports = {
-    encryption,
-    SESSION_SECRET,
-    fcm,
-};

From 08e4b8d5ea9e3cf1959cf22de86b70ef06f74464 Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Mon, 14 Nov 2022 09:55:36 +0700
Subject: [PATCH 07/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Fix wrong conflict resolution on common image component

---
 core/modules/commons/Image/index.js          | 77 ++++++++++----------
 core/modules/commons/Slick/Banner/Thumbor.js |  7 +-
 2 files changed, 41 insertions(+), 43 deletions(-)

diff --git a/core/modules/commons/Image/index.js b/core/modules/commons/Image/index.js
index 92caf025b..66ddb9621 100644
--- a/core/modules/commons/Image/index.js
+++ b/core/modules/commons/Image/index.js
@@ -2,31 +2,41 @@
 /* eslint-disable func-names */
 /* eslint-disable no-unused-vars */
 import { generateThumborUrl, getImageFallbackUrl } from '@helpers/image';
-import { getLocalStorage } from '@helpers/localstorage';
 import React, { useEffect, useState } from 'react';
 import LazyImage from './LazyImage';
 
 const CustomImage = ({
-    src, width = 500, height = 500, magezon,
-    classContainer = '', className = '', alt = 'Image', quality = 100, style = {}, lazy = false, storeConfig = {}, ...other
+    src,
+    width = 500,
+    height = 500,
+    magezon,
+    classContainer = '',
+    className = '',
+    alt = 'Image',
+    quality = 100,
+    style = {},
+    lazy = false,
+    storeConfig = {},
+    ...other
 }) => {
-    const storeConfig = getLocalStorage('storeConfig') && getLocalStorage('storeConfig');
     const enable = storeConfig && storeConfig.pwa.thumbor_enable;
     const useHttpsOrHttp = storeConfig && storeConfig.pwa.thumbor_https_http;
     const url = storeConfig && storeConfig.pwa.thumbor_url;
     const imageUrl = generateThumborUrl(src, width, height, enable, useHttpsOrHttp, url);
     const [imgSource, setImgSource] = useState(imageUrl);
 
-    const styleImage = magezon ? {
-        maxWidth: '100%',
-        maxHeight: '100%',
-    } : {
-        width: '100%',
-        height: '100%',
-        position: 'absolute',
-        top: '0',
-        left: '0',
-    };
+    const styleImage = magezon
+        ? {
+            maxWidth: '100%',
+            maxHeight: '100%',
+        }
+        : {
+            width: '100%',
+            height: '100%',
+            position: 'absolute',
+            top: '0',
+            left: '0',
+        };
 
     useEffect(() => {
         const img = new Image();
@@ -38,35 +48,28 @@ const CustomImage = ({
     return (
         <div
             className={classContainer}
-            style={magezon ? {
-                width: 'fit-content',
-                overflow: 'hidden',
-            } : {
-                backgroundColor: '#eee',
-                width: '100%',
-                position: 'relative',
-                paddingTop: `${(height / width) * 100}%`,
-                overflow: 'hidden',
-            }}
+            style={
+                magezon
+                    ? {
+                        width: 'fit-content',
+                        overflow: 'hidden',
+                    }
+                    : {
+                        backgroundColor: '#eee',
+                        width: '100%',
+                        position: 'relative',
+                        paddingTop: `${(height / width) * 100}%`,
+                        overflow: 'hidden',
+                    }
+            }
         >
             <picture>
                 <source srcSet={imgSource} type="image/webp" />
                 <source srcSet={getImageFallbackUrl(imgSource)} type="image/jpeg" />
                 {!lazy ? (
-                    <img
-                        data-pagespeed-no-defer
-                        style={styleImage}
-                        className={`img ${className}`}
-                        src={imgSource}
-                        alt={alt}
-                        {...other}
-                    />
+                    <img data-pagespeed-no-defer style={styleImage} className={`img ${className}`} src={imgSource} alt={alt} {...other} />
                 ) : (
-                    <LazyImage
-                        style={styleImage}
-                        src={imgSource}
-                        alt={alt}
-                    />
+                    <LazyImage style={styleImage} src={imgSource} alt={alt} />
                 )}
             </picture>
         </div>
diff --git a/core/modules/commons/Slick/Banner/Thumbor.js b/core/modules/commons/Slick/Banner/Thumbor.js
index 207d86275..89faea835 100644
--- a/core/modules/commons/Slick/Banner/Thumbor.js
+++ b/core/modules/commons/Slick/Banner/Thumbor.js
@@ -1,6 +1,5 @@
 import useStyles from '@common_slick/Banner/style';
 import { generateThumborUrl, getImageFallbackUrl } from '@helpers/image';
-import { getLocalStorage } from '@helpers/localstorage';
 import { BREAKPOINTS } from '@theme_vars';
 import classNames from 'classnames';
 import { useEffect, useState } from 'react';
@@ -20,7 +19,6 @@ const BannerThumbnail = (props) => {
     if (typeof heightMobile === 'string') heightMobile = parseInt(heightMobile, 0);
 
     const styles = useStyles();
-    const storeConfig = getLocalStorage('storeConfig') ? getLocalStorage('storeConfig') : null;
     const enable = storeConfig && storeConfig.pwa.thumbor_enable;
     const useHttpsOrHttp = storeConfig && storeConfig.pwa.thumbor_https_http;
     const url = storeConfig && storeConfig.pwa.thumbor_url;
@@ -45,9 +43,7 @@ const BannerThumbnail = (props) => {
     }, [imageUrl, mobileImageUrl]);
 
     return (
-        <div
-            className={styles.thumborContainer}
-        >
+        <div className={styles.thumborContainer}>
             {!lazy ? (
                 <>
                     <picture>
@@ -69,7 +65,6 @@ const BannerThumbnail = (props) => {
                             }}
                             alt={alt}
                         />
-
                     </picture>
                 </>
             ) : null}

From ce0a5c59ad532aa3654d9f5eddf1040b1e082889 Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Mon, 14 Nov 2022 15:14:55 +0700
Subject: [PATCH 08/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Fix config not passed into pageProps

---
 core/modules/theme/pages/_app.js | 11 +----------
 1 file changed, 1 insertion(+), 10 deletions(-)

diff --git a/core/modules/theme/pages/_app.js b/core/modules/theme/pages/_app.js
index cbaef32bb..0e390a792 100644
--- a/core/modules/theme/pages/_app.js
+++ b/core/modules/theme/pages/_app.js
@@ -212,16 +212,7 @@ class MyApp extends App {
                     `,
                 })
                 .then(({ data }) => data);
-            // privateConfig = await pageProps.apolloClient
-            //     .query({
-            //         query: gql`
-            //             ${PrivateConfigSchema}
-            //         `,
-            //     })
-            //     .then(({ data }) => data)
-            //     .catch((e) => console.log(e));
             frontendOptions = frontendOptions.storeConfig;
-            // privateConfig = privateConfig.storeConfig;
             removeDecimalConfig = storeConfig?.pwa?.remove_decimal_price_enable !== null ? storeConfig?.pwa?.remove_decimal_price_enable : false;
         }
 
@@ -237,7 +228,7 @@ class MyApp extends App {
             pageProps: {
                 ...pageProps,
                 app_cookies,
-                storeConfig,
+                storeConfig: { ...storeConfig, ...privateConfig },
                 isLogin,
                 lastPathNoAuth,
                 customerData,

From 56800b146f34e10d1f7ff83546c85738b1848811 Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Tue, 15 Nov 2022 10:05:57 +0700
Subject: [PATCH 09/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Combine privateconfig into storeConfig

---
 core/modules/theme/pages/_app.js       | 17 ++----------
 core/services/graphql/schema/config.js | 38 +++++++++++---------------
 2 files changed, 18 insertions(+), 37 deletions(-)

diff --git a/core/modules/theme/pages/_app.js b/core/modules/theme/pages/_app.js
index 0e390a792..d939a5f93 100644
--- a/core/modules/theme/pages/_app.js
+++ b/core/modules/theme/pages/_app.js
@@ -14,13 +14,7 @@ import { ThemeProvider } from '@material-ui/core/styles';
 import { getAppEnv } from '@root/core/helpers/env';
 import { RewriteFrames } from '@sentry/integrations';
 import { Integrations } from '@sentry/tracing';
-import {
-    frontendOptions as FrontendSchema,
-    getCategories,
-    getSensitiveConfig as PrivateConfigSchema,
-    getVesMenu,
-    storeConfig as ConfigSchema
-} from '@services/graphql/schema/config';
+import { frontendOptions as FrontendSchema, getCategories, getVesMenu, storeConfig as ConfigSchema } from '@services/graphql/schema/config';
 import theme from '@theme_theme';
 import Cookie from 'js-cookie';
 import { unregister } from 'next-offline/runtime';
@@ -129,7 +123,6 @@ class MyApp extends App {
          */
         let dataVesMenu;
         let frontendOptions;
-        let privateConfig;
         let { storeConfig } = pageProps;
 
         if (typeof window !== 'undefined') {
@@ -142,14 +135,11 @@ class MyApp extends App {
                 .then(({ data }) => data);
             if (ctx && frontendOptions && frontendOptions.response && frontendOptions.response.status && frontendOptions.response.status > 500) {
                 ctx.res.redirect('/maintenance');
-            } else if (ctx && privateConfig && privateConfig.response && privateConfig.response.status && privateConfig.response.status > 500) {
-                ctx.res.redirect('/maintenance');
             }
         }
         if (typeof window === 'undefined' && (!storeConfig || typeof storeConfig.secure_base_media_url === 'undefined')) {
             storeConfig = await graphRequest(ConfigSchema);
             frontendOptions = await graphRequest(FrontendSchema);
-            privateConfig = await graphRequest(PrivateConfigSchema);
 
             // Handle redirecting to tomaintenance page automatically when GQL is in maintenance mode.
             // We do this here since query storeConfig is the first query and be done in server side
@@ -157,7 +147,6 @@ class MyApp extends App {
                 ctx.res.redirect('/maintenance');
             }
             storeConfig = storeConfig.storeConfig;
-            privateConfig = privateConfig.storeConfig;
             if (!modules.checkout.checkoutOnly) {
                 dataVesMenu = storeConfig.pwa.ves_menu_enable
                     ? await graphRequest(getVesMenu, { alias: storeConfig.pwa.ves_menu_alias })
@@ -228,7 +217,7 @@ class MyApp extends App {
             pageProps: {
                 ...pageProps,
                 app_cookies,
-                storeConfig: { ...storeConfig, ...privateConfig },
+                storeConfig,
                 isLogin,
                 lastPathNoAuth,
                 customerData,
@@ -236,7 +225,6 @@ class MyApp extends App {
                 removeDecimalConfig,
                 dataVesMenu,
                 frontendOptions,
-                privateConfig,
             },
         };
     }
@@ -387,7 +375,6 @@ class MyApp extends App {
                 remove_decimal_config: pageProps.removeDecimalConfig,
             });
             setLocalStorage('frontend_options', pageProps.frontendOptions);
-            pageProps.storeConfig = { ...pageProps.storeConfig, ...pageProps.privateConfig };
         }
 
         return (
diff --git a/core/services/graphql/schema/config.js b/core/services/graphql/schema/config.js
index 99d75638e..adc78231f 100644
--- a/core/services/graphql/schema/config.js
+++ b/core/services/graphql/schema/config.js
@@ -311,6 +311,22 @@ export const storeConfig = `
         oms_rma_link
       }
       oms_channel_code
+      snap_is_production
+      payment_travelokapay_user_id
+      payment_travelokapay_public_key
+      payment_travelokapay_bin_whitelist
+      snap_client_key
+      paypal_key {
+        cancel_url
+        client_id
+        client_secret
+        disable_funding
+        intent
+        key_data
+        key_token
+        path
+        return_url
+      }
     }
   }  
 `;
@@ -346,28 +362,6 @@ export const frontendOptions = `
 }
 `;
 
-export const getSensitiveConfig = `
-{
-  storeConfig {
-    snap_is_production
-    payment_travelokapay_user_id
-    payment_travelokapay_public_key
-    payment_travelokapay_bin_whitelist
-    snap_client_key
-    paypal_key {
-      cancel_url
-      client_id
-      client_secret
-      disable_funding
-      intent
-      key_data
-      key_token
-      path
-      return_url
-    }
-  }
-}`;
-
 export const getCmsList = `
 {
   storeConfig {

From f79fce6a449d8445230011e670b6b3c8b5b7fda6 Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Tue, 15 Nov 2022 13:07:55 +0700
Subject: [PATCH 10/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Add function polyfills

---
 core/modules/theme/layout/index.js | 10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

diff --git a/core/modules/theme/layout/index.js b/core/modules/theme/layout/index.js
index 125f579ed..37f4c6c52 100644
--- a/core/modules/theme/layout/index.js
+++ b/core/modules/theme/layout/index.js
@@ -1,3 +1,4 @@
+/* eslint-disable operator-linebreak */
 /* eslint-disable object-curly-newline */
 /* eslint-disable react/jsx-indent */
 /* eslint-disable indent */
@@ -43,6 +44,12 @@ const RestrictionPopup = dynamic(() => import('@common_restrictionPopup'), { ssr
 const NewsletterPopup = dynamic(() => import('@core_modules/theme/components/newsletterPopup'), { ssr: false });
 const RecentlyViewed = dynamic(() => import('@core_modules/theme/components/recentlyViewed'), { ssr: false });
 
+const fromEntriesPolyfills = (iterable) => [...iterable].reduce((obj, [key, val]) => {
+        // eslint-disable-next-line no-param-reassign
+        obj[key] = val;
+        return obj;
+    }, {});
+
 const Layout = (props) => {
     const bodyStyles = useStyles();
     const {
@@ -290,6 +297,7 @@ const Layout = (props) => {
 
     if (typeof window !== 'undefined' && storeConfig) {
         const arrayStoreConfig = Object.entries(storeConfig);
+        // eslint-disable-next-line no-unused-vars, consistent-return, array-callback-return
         const filteredStoreConfig = arrayStoreConfig.filter(([key, value]) => {
             if (
                 key !== 'snap_is_production' &&
@@ -302,7 +310,7 @@ const Layout = (props) => {
                 return true;
             }
         });
-        const excludePrivateStoreConfig = Object.fromEntries(filteredStoreConfig);
+        const excludePrivateStoreConfig = fromEntriesPolyfills(filteredStoreConfig);
         setLocalStorage(storeConfigNameCookie, excludePrivateStoreConfig);
     }
 

From f17979491981909bc492590fea1c9d3990983613 Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Wed, 16 Nov 2022 13:58:21 +0700
Subject: [PATCH 11/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Fix storeconfig on common Image component

---
 core/modules/commons/Image/index.js          | 11 ++++++++---
 core/modules/commons/Slick/Banner/Thumbor.js |  6 +++---
 2 files changed, 11 insertions(+), 6 deletions(-)

diff --git a/core/modules/commons/Image/index.js b/core/modules/commons/Image/index.js
index 66ddb9621..45f026f57 100644
--- a/core/modules/commons/Image/index.js
+++ b/core/modules/commons/Image/index.js
@@ -19,9 +19,14 @@ const CustomImage = ({
     storeConfig = {},
     ...other
 }) => {
-    const enable = storeConfig && storeConfig.pwa.thumbor_enable;
-    const useHttpsOrHttp = storeConfig && storeConfig.pwa.thumbor_https_http;
-    const url = storeConfig && storeConfig.pwa.thumbor_url;
+    if (storeConfig) {
+        if (storeConfig.pwa === undefined) {
+            console.log(storeConfig);
+        }
+    }
+    const enable = storeConfig && storeConfig.pwa && storeConfig.pwa.thumbor_enable;
+    const useHttpsOrHttp = storeConfig && storeConfig.pwa && storeConfig.pwa.thumbor_https_http;
+    const url = storeConfig && storeConfig.pwa && storeConfig.pwa.thumbor_url;
     const imageUrl = generateThumborUrl(src, width, height, enable, useHttpsOrHttp, url);
     const [imgSource, setImgSource] = useState(imageUrl);
 
diff --git a/core/modules/commons/Slick/Banner/Thumbor.js b/core/modules/commons/Slick/Banner/Thumbor.js
index 89faea835..6285b2689 100644
--- a/core/modules/commons/Slick/Banner/Thumbor.js
+++ b/core/modules/commons/Slick/Banner/Thumbor.js
@@ -19,9 +19,9 @@ const BannerThumbnail = (props) => {
     if (typeof heightMobile === 'string') heightMobile = parseInt(heightMobile, 0);
 
     const styles = useStyles();
-    const enable = storeConfig && storeConfig.pwa.thumbor_enable;
-    const useHttpsOrHttp = storeConfig && storeConfig.pwa.thumbor_https_http;
-    const url = storeConfig && storeConfig.pwa.thumbor_url;
+    const enable = storeConfig && storeConfig.pwa && storeConfig.pwa.thumbor_enable;
+    const useHttpsOrHttp = storeConfig && storeConfig.pwa && storeConfig.pwa.thumbor_https_http;
+    const url = storeConfig && storeConfig.pwa && storeConfig.pwa.thumbor_url;
     const imageUrl = generateThumborUrl(src, width, height, enable, useHttpsOrHttp, url);
     const mobileImageUrl = srcMobile ? generateThumborUrl(srcMobile, widthMobile, heightMobile, enable, useHttpsOrHttp, url) : null;
     const placeholderImage = '/assets/img/placeholder.png';

From 37fc7bcadba4df3d67db735f48154bd9113ca131 Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Thu, 17 Nov 2022 11:17:15 +0700
Subject: [PATCH 12/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Modify README

---
 README.md | 41 ++++++++++++++++++++---------------------
 1 file changed, 20 insertions(+), 21 deletions(-)

diff --git a/README.md b/README.md
index a5510fe2b..25e123cff 100644
--- a/README.md
+++ b/README.md
@@ -158,26 +158,25 @@ Authorization key is a key that retrieved from Backoffice to get sensitive PWA c
 8. And then on the Integrations list, click "Activate" on the key you just created
 9. Click Allow
 10. Copy the "Access Token" part
-11. Open `package.json` file and add the key on each start command on the scripts section like this `ACCESS_KEY=[your access token]` or you can look at the example directly from `package.json` file
+11. Create `.env` file in root PWA project
+11. Open `.env` file and add the key on with definer `ACCESS_KEY` example like below
 ```
-"scripts": {
-    "assets:build": "webpack",
-    "local": "cross-env APP_ENV=local NODE_ENV=development ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node server.js",
-    "local:start": "cross-env APP_ENV=local NODE_ENV=production ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node server.js",
-    "dev": "cross-env APP_ENV=dev NODE_ENV=development node --max-http-header-size=16384 server.js",
-    "dev:start": "cross-env APP_ENV=dev NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
-    "stage": "cross-env APP_ENV=stage NODE_ENV=development ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
-    "stage:start": "cross-env APP_ENV=stage NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
-    "prod": "cross-env APP_ENV=prod NODE_ENV=development ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
-    "prod:start": "cross-env APP_ENV=prod NODE_ENV=production NODE_TLS_REJECT_UNAUTHORIZED=0 ACCESS_KEY=z42nzj61mfsbe5ys0qo2h5vha1icxe5a node --max-http-header-size=16384 server.js",
-    "pretest": "./node_modules/.bin/eslint --ignore-path .gitignore . --fix",
-    "start": "cross-env node --max-http-header-size=16384 server.js",
-    "generate-certs": "mkdir certs && openssl req -x509 -days 365 -newkey rsa:2048 -nodes -sha256 -keyout certs/privateKey.key -out certs/certificate.crt",
-    "build": "concurrently \"yarn assets:build\" \"next build\"",
-    "export": "next export",
-    "clean": "cross-env rimraf ./.next ./out",
-    "release": "cross-env NODE_ENV=production npm run clean && npm run build && npm run export",
-    "test": "jest --watch",
-    "test:ci": "jest --ci"
-  },
+ACCESS_KEY="z42nzj61mfsbe5ys0qo2h5vha1icxe5a"
+ENCRYPTION_KEY=TXAjwm8k53PJG9NacLbyZavvQB2qBh43
+ALGORITHM=aes-256-cbc
+FCM_KEY_SERVER=
+FCM_TOPIC=notificationspwa
+SESSION_SECRET=asdasdd1212ads12!!!@**DADxx1
+NEXT_PUBLIC_ENCRYPTION_KEY=TXAjwm8k53PJG9NacLbyZavvQB2qBh43
+NEXT_PUBLIC_ALGORITHM=aes-256-cbc
 ```
+
+Explanation :
+ACCESS_KEY = Authorization key to fetch storeConfig (required)
+ENCRYPTION_KEY = Encryption key to encrypt sensitive data (required)
+ALGORITHM = Encryption algorithm (required)
+FCM_KEY_SERVER = Firebase server key (optional)
+FCM_TOPIC = Firebase topic (optional)
+SESSION_SECRET = Session secret (required)
+NEXT_PUBLIC_ENCRYPTION_KEY = Encryption key to encrypt sensitive data (required) -> This is for client side usage, consider make this different from the server side one (`ENCRYPTION_KEY`)
+NEXT_PUBLIC_ALGORITHM = Encryption algorithm (required) -> This is for client side usage, consider make this different from the server side one (`ALGORITHM`)
\ No newline at end of file

From b5428682ef7760fafe59509e6cf3682b036b565b Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Thu, 17 Nov 2022 16:27:11 +0700
Subject: [PATCH 13/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Modify README and add .env.example

---
 .env => .env.example |  2 +-
 README.md            | 20 ++++++++++----------
 2 files changed, 11 insertions(+), 11 deletions(-)
 rename .env => .env.example (73%)

diff --git a/.env b/.env.example
similarity index 73%
rename from .env
rename to .env.example
index 804e023c1..162396df3 100644
--- a/.env
+++ b/.env.example
@@ -1,4 +1,4 @@
-ACCESS_KEY="z42nzj61mfsbe5ys0qo2h5vha1icxe5a"
+ACCESS_KEY="YOUR_ACCESS_KEY"
 ENCRYPTION_KEY=TXAjwm8k53PJG9NacLbyZavvQB2qBh43
 ALGORITHM=aes-256-cbc
 FCM_KEY_SERVER=
diff --git a/README.md b/README.md
index 25e123cff..883fb9d2e 100644
--- a/README.md
+++ b/README.md
@@ -145,7 +145,7 @@ patch -p1 --forward < patches/fix_loadmore_plp.patch || true
 ```
 
 # Authorization Key
-Authorization key is a key that retrieved from Backoffice to get sensitive PWA configurations such as traveloka API key, xendit key, paypal key, etc.
+Authorization key is a key that retrieved from Backoffice to get sensitive store configurations such as traveloka API key, xendit key, paypal key, etc for PWA
 ### How to get authorization key for Swift PWA project
 
 1. Open backoffice
@@ -161,7 +161,7 @@ Authorization key is a key that retrieved from Backoffice to get sensitive PWA c
 11. Create `.env` file in root PWA project
 11. Open `.env` file and add the key on with definer `ACCESS_KEY` example like below
 ```
-ACCESS_KEY="z42nzj61mfsbe5ys0qo2h5vha1icxe5a"
+ACCESS_KEY="YOUR_ACCESS_KEY"
 ENCRYPTION_KEY=TXAjwm8k53PJG9NacLbyZavvQB2qBh43
 ALGORITHM=aes-256-cbc
 FCM_KEY_SERVER=
@@ -172,11 +172,11 @@ NEXT_PUBLIC_ALGORITHM=aes-256-cbc
 ```
 
 Explanation :
-ACCESS_KEY = Authorization key to fetch storeConfig (required)
-ENCRYPTION_KEY = Encryption key to encrypt sensitive data (required)
-ALGORITHM = Encryption algorithm (required)
-FCM_KEY_SERVER = Firebase server key (optional)
-FCM_TOPIC = Firebase topic (optional)
-SESSION_SECRET = Session secret (required)
-NEXT_PUBLIC_ENCRYPTION_KEY = Encryption key to encrypt sensitive data (required) -> This is for client side usage, consider make this different from the server side one (`ENCRYPTION_KEY`)
-NEXT_PUBLIC_ALGORITHM = Encryption algorithm (required) -> This is for client side usage, consider make this different from the server side one (`ALGORITHM`)
\ No newline at end of file
+1. ACCESS_KEY = Authorization key to fetch storeConfig (required)
+2. ENCRYPTION_KEY = Encryption key to encrypt sensitive data (required)
+3. ALGORITHM = Encryption algorithm (required)
+4. FCM_KEY_SERVER = Firebase server key (optional)
+5. FCM_TOPIC = Firebase topic (optional)
+6. SESSION_SECRET = Session secret (required)
+7. NEXT_PUBLIC_ENCRYPTION_KEY = Encryption key to encrypt sensitive data (required) -> This is for client side usage, consider make this different from the server side one (`ENCRYPTION_KEY`)
+8. NEXT_PUBLIC_ALGORITHM = Encryption algorithm (required) -> This is for client side usage, consider make this different from the server side one (`ALGORITHM`)
\ No newline at end of file

From 4c382d36b7092dade17c31b9aa95e84cedade409 Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Thu, 17 Nov 2022 16:32:45 +0700
Subject: [PATCH 14/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Remove .env

---
 .gitignore | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/.gitignore b/.gitignore
index be6acd6b5..3487ebfac 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,8 @@
 # See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
 
+# environment variables
+.env
+
 # dependencies
 /node_modules
 /.pnp

From ad4cb0b9c56797f726f3b78ca595c5436d3c2468 Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Thu, 17 Nov 2022 16:53:06 +0700
Subject: [PATCH 15/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Add .env back

---
 .env       | 8 ++++++++
 .gitignore | 3 ---
 2 files changed, 8 insertions(+), 3 deletions(-)
 create mode 100644 .env

diff --git a/.env b/.env
new file mode 100644
index 000000000..162396df3
--- /dev/null
+++ b/.env
@@ -0,0 +1,8 @@
+ACCESS_KEY="YOUR_ACCESS_KEY"
+ENCRYPTION_KEY=TXAjwm8k53PJG9NacLbyZavvQB2qBh43
+ALGORITHM=aes-256-cbc
+FCM_KEY_SERVER=
+FCM_TOPIC=notificationspwa
+SESSION_SECRET=asdasdd1212ads12!!!@**DADxx1
+NEXT_PUBLIC_ENCRYPTION_KEY=TXAjwm8k53PJG9NacLbyZavvQB2qBh43
+NEXT_PUBLIC_ALGORITHM=aes-256-cbc
\ No newline at end of file
diff --git a/.gitignore b/.gitignore
index 3487ebfac..be6acd6b5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,8 +1,5 @@
 # See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
 
-# environment variables
-.env
-
 # dependencies
 /node_modules
 /.pnp

From 3baa8e64b46f40f6459dfa2b2b7c1c5568eb6d3b Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Thu, 17 Nov 2022 16:53:48 +0700
Subject: [PATCH 16/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Remove .env

---
 .env | 8 --------
 1 file changed, 8 deletions(-)
 delete mode 100644 .env

diff --git a/.env b/.env
deleted file mode 100644
index 162396df3..000000000
--- a/.env
+++ /dev/null
@@ -1,8 +0,0 @@
-ACCESS_KEY="YOUR_ACCESS_KEY"
-ENCRYPTION_KEY=TXAjwm8k53PJG9NacLbyZavvQB2qBh43
-ALGORITHM=aes-256-cbc
-FCM_KEY_SERVER=
-FCM_TOPIC=notificationspwa
-SESSION_SECRET=asdasdd1212ads12!!!@**DADxx1
-NEXT_PUBLIC_ENCRYPTION_KEY=TXAjwm8k53PJG9NacLbyZavvQB2qBh43
-NEXT_PUBLIC_ALGORITHM=aes-256-cbc
\ No newline at end of file

From f729618ad3d0c6430b74525e5136518175138559 Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Fri, 18 Nov 2022 11:32:19 +0700
Subject: [PATCH 17/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Update README and fix missing props

---
 README.md                                             | 11 +++++++++++
 .../pages/review/components/PaymentMethod/index.js    |  3 +--
 2 files changed, 12 insertions(+), 2 deletions(-)

diff --git a/README.md b/README.md
index 883fb9d2e..eb0fc6999 100644
--- a/README.md
+++ b/README.md
@@ -40,6 +40,17 @@ const graphqlEndpoint = {
     prod: '[gql endpoint for prod]',
 };
 ```
+4. Setup `.env`. See [Setup Environment](#authorization-key) section for more details.
+```
+ACCESS_KEY="YOUR_ACCESS_KEY"
+ENCRYPTION_KEY=TXAjwm8k53PJG9NacLbyZavvQB2qBh43
+ALGORITHM=aes-256-cbc
+FCM_KEY_SERVER=
+FCM_TOPIC=notificationspwa
+SESSION_SECRET=asdasdd1212ads12!!!@**DADxx1
+NEXT_PUBLIC_ENCRYPTION_KEY=TXAjwm8k53PJG9NacLbyZavvQB2qBh43
+NEXT_PUBLIC_ALGORITHM=aes-256-cbc
+```
 
 ## Installation
 You can run SwiftPWA with or without docker.
diff --git a/core/modules/paypal/pages/review/components/PaymentMethod/index.js b/core/modules/paypal/pages/review/components/PaymentMethod/index.js
index af269ada7..8488ef2e8 100644
--- a/core/modules/paypal/pages/review/components/PaymentMethod/index.js
+++ b/core/modules/paypal/pages/review/components/PaymentMethod/index.js
@@ -1,12 +1,11 @@
 import Typography from '@common_typography';
-import { modules } from '@config';
 import useStyles from '@core_modules/paypal/pages/review/components/PaymentMethod/style';
 import classNames from 'classnames';
 import React from 'react';
 // import Link from 'next/link';
 
 const PaymentMethod = (props) => {
-    const { t, checkout } = props;
+    const { t, checkout, storeConfig } = props;
     let paypalData = {};
     if (typeof window !== 'undefined') {
         paypalData = JSON.parse(localStorage.getItem(storeConfig?.paypal_key.key_data));

From 67afd5212cbf3ae8a35a23217eca5122590f7689 Mon Sep 17 00:00:00 2001
From: Fakhri Rizha Ananda <fakhri.rizha@sirclo.com>
Date: Fri, 18 Nov 2022 11:55:34 +0700
Subject: [PATCH 18/18] feat([28891039] - [PWA] Private API to get sensitives
 configurations): Remove paypal config in swift.config.js

---
 .../paypal/plugins/PaypalButton/index.js      | 15 +++++--------
 swift.config.js                               | 22 -------------------
 2 files changed, 6 insertions(+), 31 deletions(-)

diff --git a/core/modules/paypal/plugins/PaypalButton/index.js b/core/modules/paypal/plugins/PaypalButton/index.js
index b05103bb2..6577f1a41 100644
--- a/core/modules/paypal/plugins/PaypalButton/index.js
+++ b/core/modules/paypal/plugins/PaypalButton/index.js
@@ -1,17 +1,14 @@
 /* eslint-disable prefer-destructuring */
 import { modules } from '@config';
-import {
-    setPaypalPaymentMethod, createPaypalExpressToken,
-    // setShippingAddressByInput, setBillingAddressByInput, setGuestEmailAddressOnCart,
-} from '@core_modules/paypal/services/graphql';
+import { createPaypalExpressToken, setPaypalPaymentMethod } from '@core_modules/paypal/services/graphql';
+import { getCartId } from '@helper_cartid';
 import PaypalButtonView from '@plugin_paypalbutton/view';
 import TagManager from 'react-gtm-module';
-import { getCartId } from '@helper_cartid';
 // import { setLocalStorage } from '@helper_localstorage';
-import { getLoginInfo } from '@helper_auth';
-import Router from 'next/router';
 import gqlService from '@core_modules/checkout/services/graphql';
+import { getLoginInfo } from '@helper_auth';
 import { getCookies } from '@helper_cookies';
+import Router from 'next/router';
 
 const PaypalButton = (props) => {
     const { t, cart, storeConfig } = props;
@@ -301,13 +298,13 @@ const PaypalButton = (props) => {
                 // }
                 // setLocalStorage(modules.paypal.keyData, paypalData);
                 window.backdropLoader(false);
-                Router.push(`/${modules.paypal.returnUrl}`);
+                Router.push(`/${storeConfig.paypal_key.return_url}`);
             }).catch((
             // e
             ) => {
             // console.log(e);
             // onErrorPaypal(e);
-                Router.push(`/${modules.paypal.returnUrl}`);
+                Router.push(`/${storeConfig.paypal_key.return_url}`);
             });
     };
 
diff --git a/swift.config.js b/swift.config.js
index 1b8d73da6..542ff6d64 100644
--- a/swift.config.js
+++ b/swift.config.js
@@ -286,28 +286,6 @@ const modules = {
             ],
         },
     },
-    paypal: {
-        enabled: true,
-        path: '/paypal',
-        clientId: {
-            local: '', // sample AaOafUT6j2w7kZNb97_cAlI0MjGexmWOaWo650ANV5xgrT3Ff1xtdwJxVByCHUJZ0Ga9HKvbRw5NIjNV
-            dev: '',
-            prod: '',
-            stage: 'AZ-Jtz00C4S1mfLEsDvCqc-kO4e3JPR4QklRcVmt6rvBFrzae1E7g-tCb-zzLOLpP2kAA_ai76qRpQCU',
-        },
-        clientSecret: {
-            local: '', // sample EM2Uqt5eiPEgcCMi6NAF94DNsOoP3YBgGRkBGyFQdEXahjzuPfi17sjfhW4N9CfmE_RLjDGuZ19Gf1WP
-            dev: '',
-            prod: '',
-            stage: 'EG4Dpk2XELnq8VxwAVKfc1BIayJEt1936We1fpLU7vd8cvb0qY2MnAVo1tqOzNoRRp3UWdsh2KIp0s3g',
-        },
-        intent: 'authorize',
-        returnUrl: 'paypal/express/review',
-        cancelUrl: 'checkout/cart',
-        keyData: 'paypal-data',
-        keyToken: 'paypal-token',
-        disableFunding: 'venmo%2Cbancontact%2Ceps%2Cgiropay%2Cideal%2Cmybank%2Cp24%2Csofort',
-    },
     cart: {
         enabled: true,
         path: '/checkout/cart',