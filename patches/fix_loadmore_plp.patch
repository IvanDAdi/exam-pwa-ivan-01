From c52a6243bc9ae4bfcbf2340aede03e04a7c3eb8a Mon Sep 17 00:00:00 2001
From: revqiabdillah <rifqi.abdillah@sirclo.com>
Date: Mon, 12 Sep 2022 10:40:43 +0700
Subject: [PATCH] fix([28844016] PLP - Loadmore): fixing error load more
 product

---
 core/helpers/currency.js                      |  1 -
 .../catalog/plugins/ProductList/core.js       | 90 ++++++++++---------
 .../modules/catalog/services/graphql/index.js |  9 +-
 .../catalog/services/graphql/productSchema.js | 13 ++-
 4 files changed, 60 insertions(+), 53 deletions(-)

diff --git a/core/helpers/currency.js b/core/helpers/currency.js
index 4c94d7da5..b1bcac087 100644
--- a/core/helpers/currency.js
+++ b/core/helpers/currency.js
@@ -58,7 +58,6 @@ export const formatPrice = (value, currency = general.defaultCurrencyCode, curre
             value = getCurrent.value;
             localeConfig = currenciesToLocale[currency];
         } else {
-            console.log('wehaha');
             const APP_CURRENCY = cookies.get('app_currency');
             if (APP_CURRENCY !== undefined) {
                 const getCurrent = getCurrentCurrency({ APP_CURRENCY, value });
diff --git a/core/modules/catalog/plugins/ProductList/core.js b/core/modules/catalog/plugins/ProductList/core.js
index 60d7a10b7..6b6717ec1 100644
--- a/core/modules/catalog/plugins/ProductList/core.js
+++ b/core/modules/catalog/plugins/ProductList/core.js
@@ -14,10 +14,23 @@ import Content from '@plugin_productlist/components';
 
 const Product = (props) => {
     const {
-        catId = 0, catalog_search_engine, customFilter, url_path, defaultSort, t,
-        categoryPath, ErrorMessage, storeConfig, query, path, availableFilter,
-        token, isLogin, ...other
+        catId = 0,
+        catalog_search_engine,
+        customFilter,
+        url_path,
+        defaultSort,
+        t,
+        categoryPath,
+        ErrorMessage,
+        storeConfig,
+        query,
+        path,
+        availableFilter,
+        token,
+        isLogin,
+        ...other
     } = props;
+    const router = useRouter();
 
     const [page, setPage] = React.useState(1);
     const [loadmore, setLoadmore] = React.useState(false);
@@ -73,19 +86,25 @@ const Product = (props) => {
         };
     }
 
-    const { loading, data, fetchMore } = getProduct(config, {
-        variables: {
-            pageSize: parseInt(storeConfig?.pwa?.page_size, 0) || 10,
-            currentPage: 1,
+    const { loading, data, fetchMore } = getProduct(
+        config,
+        {
+            variables: {
+                pageSize: parseInt(storeConfig?.pwa?.page_size, 0) || 10,
+                currentPage: 1,
+            },
+            context,
+            fetchPolicy: config.sort && config.sort.key === 'random' && filterSaved ? 'cache-and-network' : 'cache-first',
         },
-        context,
-        fetchPolicy: (config.sort && config.sort.key === 'random') && filterSaved ? 'cache-and-network' : 'cache-first',
-    });
+        router,
+    );
     let products = {};
-    products = data && data.products ? data.products : {
-        total_count: 0,
-        items: [],
-    };
+    products = data && data.products
+        ? data.products
+        : {
+            total_count: 0,
+            items: [],
+        };
     // generate filter if donthave custom filter
     const aggregations = [];
     if (!customFilter && !loading && products.aggregations) {
@@ -115,33 +134,29 @@ const Product = (props) => {
             const totalProduct = products && products.total_count ? products.total_count : 0;
             const totalPage = Math.ceil(totalProduct / pageSize);
             if (fetchMore && typeof fetchMore !== 'undefined' && page < totalPage) {
-                await setLoadmore(true);
+                setLoadmore(true);
                 setPage(page + 1);
                 fetchMore({
-                    query: Schema.getProduct({ ...config, currentPage: page + 1 }),
+                    query: Schema.getProduct({ ...config, currentPage: page + 1 }, router),
                     variables: {
                         pageSize,
                         currentPage: page + 1,
                     },
                     context,
-                    updateQuery: (
-                        previousResult,
-                        { fetchMoreResult },
-                    ) => {
+                    updateQuery: (previousResult, { fetchMoreResult }) => {
                         setLoadmore(false);
                         return {
                             products: {
                                 ...fetchMoreResult.products,
-                                items: [
-                                    ...previousResult.products.items,
-                                    ...fetchMoreResult.products.items,
-                                ],
+                                items: [...previousResult.products.items, ...fetchMoreResult.products.items],
                             },
                         };
                     },
                 });
             }
-        } catch (error) {}
+        } catch (error) {
+            setLoadmore(false);
+        }
     };
 
     React.useEffect(() => {
@@ -157,10 +172,11 @@ const Product = (props) => {
                         impressions: data.products.items.map((product, index) => {
                             let categoryProduct = '';
                             // eslint-disable-next-line no-unused-expressions
-                            product.categories.length > 0 && product.categories.map(({ name }, indx) => {
-                                if (indx > 0) categoryProduct += `/${name}`;
-                                else categoryProduct += name;
-                            });
+                            product.categories.length > 0
+                                && product.categories.map(({ name }, indx) => {
+                                    if (indx > 0) categoryProduct += `/${name}`;
+                                    else categoryProduct += name;
+                                });
                             return {
                                 name: product.name,
                                 id: product.sku,
@@ -196,12 +212,7 @@ const Product = (props) => {
         storeConfig,
     };
 
-    return (
-        <Content
-            {...contentProps}
-            {...other}
-        />
-    );
+    return <Content {...contentProps} {...other} />;
 };
 
 Product.propTypes = {
@@ -225,14 +236,7 @@ const ProductWrapper = (props) => {
     if (loadingAgg) {
         return <span />;
     }
-    return (
-        <Product
-            {...props}
-            availableFilter={availableFilter}
-            path={path}
-            query={query}
-        />
-    );
+    return <Product {...props} availableFilter={availableFilter} path={path} query={query} />;
 };
 
 export default ProductWrapper;
diff --git a/core/modules/catalog/services/graphql/index.js b/core/modules/catalog/services/graphql/index.js
index 8f0c79792..ffa016f85 100644
--- a/core/modules/catalog/services/graphql/index.js
+++ b/core/modules/catalog/services/graphql/index.js
@@ -2,7 +2,14 @@ import { useQuery, useMutation, useLazyQuery } from '@apollo/client';
 import * as schemaCategory from '@core_modules/catalog/services/graphql/categorySchema';
 import * as productSchema from '@core_modules/catalog/services/graphql/productSchema';
 
-export const getProduct = (config, otherConfig = {}) => useQuery(productSchema.getProduct(config), {
+/**
+ * Function Get Product Schema
+ * @param config Object Config like variables
+ * @param otherConfig Object config useQuery like context
+ * @param router router Object from nextjs (useRouter hook)
+ * @returns Schema get product
+ */
+export const getProduct = (config, otherConfig = {}, router) => useQuery(productSchema.getProduct(config, router), {
     ...otherConfig,
 });
 export const getProductAgragations = () => useQuery(productSchema.getProductAgragations(), {});
diff --git a/core/modules/catalog/services/graphql/productSchema.js b/core/modules/catalog/services/graphql/productSchema.js
index c5e5e1836..9b320ff1d 100644
--- a/core/modules/catalog/services/graphql/productSchema.js
+++ b/core/modules/catalog/services/graphql/productSchema.js
@@ -2,18 +2,15 @@
 
 import { gql } from '@apollo/client';
 import { modules } from '@config';
-import { useRouter } from '@root/node_modules/next/router';
 
 /**
  * generate dynamic filter query
- * @param catId number
  * @param filter array of filter value
+ * @param router Object router from nextjs (useRouter hook)
  * @returns string query to generate on grapql tag
  */
 
-const filterProduct = (filter) => {
-    const router = useRouter();
-
+const filterProduct = (filter, router) => {
     let queryFilter = '{ ';
     if (router.asPath.includes('color')) {
         const routerPaths = router.asPath.split('?');
@@ -66,17 +63,17 @@ export const getProductAgragations = () => gql`
 
 /**
  * scema dynamic product
- * @param catId number
+ * @param config Object (Variable, etc)
  * @param config Object {pageSize: number, currentPage: Number}
  * @returns grapql query
  */
 
-export const getProduct = (config = {}) => gql`
+export const getProduct = (config = {}, router) => gql`
   query getProducts(
     $pageSize: Int,
     $currentPage: Int,
   ){
-  products( search: "${config.search}" ,filter: ${filterProduct(config.filter)},
+  products( search: "${config.search}" ,filter: ${filterProduct(config.filter, router)},
   pageSize: $pageSize,
   currentPage: $currentPage
   ${config.sort && config.sort.key && config.sort.key !== 'position' ? `, sort: {${config.sort.key} : ${config.sort.value}}` : ''}